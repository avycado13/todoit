{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///Users/avy/Code/todoit/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,IAAA,oOAAO,EAAC,IAAA,8LAAI,EAAC;AACtB","debugId":null}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///Users/avy/Code/todoit/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n"],"names":[],"mappings":";;;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,UAAU,EACjB,SAAS,EACT,cAAc,YAAY,EAC1B,aAAa,IAAI,EACjB,GAAG,OACkD;IACrD,qBACE,qZAAC,8XAAuB;QACtB,aAAU;QACV,YAAY;QACZ,aAAa;QACb,WAAW,IAAA,kHAAE,EACX,kKACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///Users/avy/Code/todoit/db/zero/schema.gen.ts"],"sourcesContent":["/* eslint-disable */\n/* tslint:disable */\n// noinspection JSUnusedGlobalSymbols\n// biome-ignore-all\n/*\n * ------------------------------------------------------------\n * ## This file was automatically generated by drizzle-zero. ##\n * ## Any changes you make to this file will be overwritten. ##\n * ##                                                        ##\n * ## Additionally, you should also exclude this file from   ##\n * ## your linter and/or formatter to prevent it from being  ##\n * ## checked or modified.                                   ##\n * ##                                                        ##\n * ## SOURCE: https://github.com/0xcadams/drizzle-zero        ##\n * ------------------------------------------------------------\n */\n\nimport type { Row } from \"@rocicorp/zero\";\nimport { createBuilder } from \"@rocicorp/zero\";\nimport type { ZeroCustomType } from \"drizzle-zero\";\nimport type { default as zeroSchema } from \"../../drizzle-zero.config\";\n\n/**\n * The Zero schema object.\n * This type is auto-generated from your Drizzle schema definition.\n */\nexport const schema = {\n  tables: {\n    tasks: {\n      name: \"tasks\",\n      columns: {\n        id: {\n          type: \"number\",\n          optional: true,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"tasks\",\n            \"id\"\n          >,\n        },\n        title: {\n          type: \"string\",\n          optional: false,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"tasks\",\n            \"title\"\n          >,\n        },\n        description: {\n          type: \"string\",\n          optional: true,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"tasks\",\n            \"description\"\n          >,\n        },\n        due_date: {\n          type: \"number\",\n          optional: true,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"tasks\",\n            \"due_date\"\n          >,\n        },\n        status: {\n          type: \"string\",\n          optional: true,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"tasks\",\n            \"status\"\n          >,\n        },\n        created_at: {\n          type: \"number\",\n          optional: true,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"tasks\",\n            \"created_at\"\n          >,\n        },\n        updated_at: {\n          type: \"number\",\n          optional: true,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"tasks\",\n            \"updated_at\"\n          >,\n        },\n        userId: {\n          type: \"string\",\n          optional: false,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"tasks\",\n            \"userId\"\n          >,\n          serverName: \"user_id\",\n        },\n      },\n      primaryKey: [\"id\"],\n    },\n    user: {\n      name: \"user\",\n      columns: {\n        id: {\n          type: \"string\",\n          optional: false,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"user\",\n            \"id\"\n          >,\n        },\n        name: {\n          type: \"string\",\n          optional: false,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"user\",\n            \"name\"\n          >,\n        },\n        email: {\n          type: \"string\",\n          optional: false,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"user\",\n            \"email\"\n          >,\n        },\n        role: {\n          type: \"string\",\n          optional: true,\n          customType: null as unknown as ZeroCustomType<\n            typeof zeroSchema,\n            \"user\",\n            \"role\"\n          >,\n        },\n      },\n      primaryKey: [\"id\"],\n    },\n  },\n  relationships: {},\n  enableLegacyQueries: true,\n  enableLegacyMutators: true,\n} as const;\n\n/**\n * Represents the Zero schema type.\n * This type is auto-generated from your Drizzle schema definition.\n */\nexport type Schema = typeof schema;\n/**\n * Represents a row from the \"tasks\" table.\n * This type is auto-generated from your Drizzle schema definition.\n */\nexport type Task = Row<Schema[\"tables\"][\"tasks\"]>;\n/**\n * Represents a row from the \"user\" table.\n * This type is auto-generated from your Drizzle schema definition.\n */\nexport type User = Row<Schema[\"tables\"][\"user\"]>;\n\n/**\n * Represents the Zero schema query builder.\n * This type is auto-generated from your Drizzle schema definition.\n */\nexport const builder = createBuilder(schema);\n"],"names":[],"mappings":"AAAA,kBAAkB,GAClB,kBAAkB,GAClB,qCAAqC;AACrC,mBAAmB;AACnB;;;;;;;;;;;CAWC;;;;;;AAGD;AAAA;;AAQO,MAAM,SAAS;IACpB,QAAQ;QACN,OAAO;YACL,MAAM;YACN,SAAS;gBACP,IAAI;oBACF,MAAM;oBACN,UAAU;oBACV,YAAY;gBAKd;gBACA,OAAO;oBACL,MAAM;oBACN,UAAU;oBACV,YAAY;gBAKd;gBACA,aAAa;oBACX,MAAM;oBACN,UAAU;oBACV,YAAY;gBAKd;gBACA,UAAU;oBACR,MAAM;oBACN,UAAU;oBACV,YAAY;gBAKd;gBACA,QAAQ;oBACN,MAAM;oBACN,UAAU;oBACV,YAAY;gBAKd;gBACA,YAAY;oBACV,MAAM;oBACN,UAAU;oBACV,YAAY;gBAKd;gBACA,YAAY;oBACV,MAAM;oBACN,UAAU;oBACV,YAAY;gBAKd;gBACA,QAAQ;oBACN,MAAM;oBACN,UAAU;oBACV,YAAY;oBAKZ,YAAY;gBACd;YACF;YACA,YAAY;gBAAC;aAAK;QACpB;QACA,MAAM;YACJ,MAAM;YACN,SAAS;gBACP,IAAI;oBACF,MAAM;oBACN,UAAU;oBACV,YAAY;gBAKd;gBACA,MAAM;oBACJ,MAAM;oBACN,UAAU;oBACV,YAAY;gBAKd;gBACA,OAAO;oBACL,MAAM;oBACN,UAAU;oBACV,YAAY;gBAKd;gBACA,MAAM;oBACJ,MAAM;oBACN,UAAU;oBACV,YAAY;gBAKd;YACF;YACA,YAAY;gBAAC;aAAK;QACpB;IACF;IACA,eAAe,CAAC;IAChB,qBAAqB;IACrB,sBAAsB;AACxB;AAsBO,MAAM,UAAU,IAAA,uWAAa,EAAC","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///Users/avy/Code/todoit/db/zero/schema.ts"],"sourcesContent":["import { Session } from '@/lib/auth';\nimport {\n  ANYONE_CAN,\n  definePermissions,\n  ExpressionBuilder,\n  Schema as ZeroSchema,\n  type Row\n} from '@rocicorp/zero';\nimport { schema as genSchema } from './schema.gen';\n\n// Define a minimal user table for the relationship reference\n// Assuming 'user' table exists and has an 'id' primary key of type string.\n\n\nexport const schema = {\n  ...genSchema,\n  enableLegacyMutators: false,\n} as const satisfies ZeroSchema;\n\nexport type Schema = typeof schema;\nexport type Task = Row<typeof schema.tables.tasks>;\nexport type User = Row<typeof schema.tables.user>;\n\nconst allowIfTaskOwner = (\n  session: Session,\n  { cmp }: ExpressionBuilder<Schema, 'tasks'>,\n) => {\n  // You can see a task if you are its owner.\n  return cmp('userId', session.user.id);\n};\n\nexport const permissions = definePermissions<Session, Schema>(schema, () => {\n  return {\n    tasks: {\n      row: {\n        select: [allowIfTaskOwner],\n        insert: ANYONE_CAN,\n        update: {\n          preMutation: [allowIfTaskOwner],\n        },\n        delete: [allowIfTaskOwner],\n      },\n    },\n    user: {\n      row: {\n        select: ANYONE_CAN,\n        insert: ANYONE_CAN,\n        update: {\n          preMutation: ANYONE_CAN,\n        },\n        delete: ANYONE_CAN,\n      },\n    },\n  };\n});"],"names":[],"mappings":";;;;;;AACA;AAAA;AAOA;;;AAMO,MAAM,SAAS;IACpB,GAAG,qIAAS;IACZ,sBAAsB;AACxB;AAMA,MAAM,mBAAmB,CACvB,SACA,EAAE,GAAG,EAAsC;IAE3C,2CAA2C;IAC3C,OAAO,IAAI,UAAU,QAAQ,IAAI,CAAC,EAAE;AACtC;AAEO,MAAM,cAAc,IAAA,2WAAiB,EAAkB,QAAQ;IACpE,OAAO;QACL,OAAO;YACL,KAAK;gBACH,QAAQ;oBAAC;iBAAiB;gBAC1B,QAAQ,oWAAU;gBAClB,QAAQ;oBACN,aAAa;wBAAC;qBAAiB;gBACjC;gBACA,QAAQ;oBAAC;iBAAiB;YAC5B;QACF;QACA,MAAM;YACJ,KAAK;gBACH,QAAQ,oWAAU;gBAClB,QAAQ,oWAAU;gBAClB,QAAQ;oBACN,aAAa,oWAAU;gBACzB;gBACA,QAAQ,oWAAU;YACpB;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///Users/avy/Code/todoit/db/zero/mutators.ts"],"sourcesContent":["// db/zero/mutators.ts\n\nimport type { Transaction } from \"@rocicorp/zero\";\nimport type { Schema } from \"./schema.gen\";\n\ninterface AuthDataForMutators {\n\tuser: {\n\t\tid: string;\n\t};\n\tsession?: {\n\t\ttoken: string;\n\t};\n}\n\ntype Tx = Transaction<Schema>;\n\nexport function createMutators(authData: AuthDataForMutators | undefined) {\n\treturn {\n\t\ttasks: {\n\t\t\tadd: async (\n\t\t\t\ttx: Tx,\n\t\t\t\t{\n\t\t\t\t\ttitle,\n\t\t\t\t\tdescription,\n\t\t\t\t\tdue_date,\n\t\t\t\t\tstatus,\n\t\t\t\t}: {\n\t\t\t\t\ttitle: string;\n\t\t\t\t\tdescription?: string;\n\t\t\t\t\tdue_date?: number;\n\t\t\t\t\tstatus: string;\n\t\t\t\t},\n\t\t\t) => {\n\t\t\t\t// The user object from AuthSession has a slightly different shape\n\t\t\t\tif (!authData) {\n\t\t\t\t\tthrow new Error(\"Not authenticated\");\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tawait tx.mutate.tasks.insert({\n\t\t\t\t\t\tid: null,\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t\tdescription,\n\t\t\t\t\t\tdue_date: due_date ?? null,\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tcreated_at: Date.now(),\n\t\t\t\t\t\tupdated_at: Date.now(),\n\t\t\t\t\t\t// Access the user ID correctly from the AuthSession type\n\t\t\t\t\t\tuserId: authData.user.id,\n\t\t\t\t\t});\n\t\t\t\t\t// ID is auto-generated by the database (serial)\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(\"Error adding task:\", err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tremove: async (tx: Tx, taskId: string) => {\n\t\t\t\tif (!authData?.user) {\n\t\t\t\t\tthrow new Error(\"Not authenticated\");\n\t\t\t\t}\n\t\t\t\tconst task = await tx.query.tasks\n\t\t\t\t\t.where(\"id\", parseInt(taskId))\n\t\t\t\t\t.where(\"userId\", authData.user.id)\n\t\t\t\t\t.one();\n\t\t\t\tif (!task) return;\n\t\t\t\tawait tx.mutate.tasks.delete({\n\t\t\t\t\tid: task.id,\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tupdateTask: async (\n\t\t\t\ttx: Tx,\n\t\t\t\t{\n\t\t\t\t\tid,\n\t\t\t\t\tstatus,\n\t\t\t\t\ttitle,\n\t\t\t\t\tdescription,\n\t\t\t\t\tdue_date,\n\t\t\t\t}: {\n\t\t\t\t\tid: string;\n\t\t\t\t\tstatus: string;\n\t\t\t\t\ttitle: string | undefined | null;\n\t\t\t\t\tdescription: string | undefined | null;\n\t\t\t\t\tdue_date: number | undefined | null;\n\t\t\t\t},\n\t\t\t) => {\n\t\t\t\tif (!authData?.user) throw new Error(\"Not authenticated\");\n\n\t\t\t\t// Ensure the task belongs to the authenticated user\n\t\t\t\tconst task = await tx.query.tasks\n\t\t\t\t\t.where(\"id\", parseInt(id))\n\t\t\t\t\t.where(\"userId\", authData.user.id)\n\t\t\t\t\t.one();\n\n\t\t\t\tif (!task) return;\n\n\t\t\t\tawait tx.mutate.tasks.update(\n\t\t\t\t\t{\n\t\t\t\t\t\tid: task.id,\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\ttitle: title ?? undefined,\n\t\t\t\t\t\tdescription,\n\t\t\t\t\t\tdue_date,\n\t\t\t\t\t\tupdated_at: Date.now(),\n\t\t\t\t\t}, // update object\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t} as const;\n}\n\nexport type Mutators = ReturnType<typeof createMutators>;\n"],"names":[],"mappings":"AAAA,sBAAsB;;;;;AAgBf,SAAS,eAAe,QAAyC;IACvE,OAAO;QACN,OAAO;YACN,KAAK,OACJ,IACA,EACC,KAAK,EACL,WAAW,EACX,QAAQ,EACR,MAAM,EAMN;gBAED,kEAAkE;gBAClE,IAAI,CAAC,UAAU;oBACd,MAAM,IAAI,MAAM;gBACjB;gBACA,IAAI;oBACH,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;wBAC5B,IAAI;wBACJ;wBACA;wBACA,UAAU,YAAY;wBACtB;wBACA,YAAY,KAAK,GAAG;wBACpB,YAAY,KAAK,GAAG;wBACpB,yDAAyD;wBACzD,QAAQ,SAAS,IAAI,CAAC,EAAE;oBACzB;gBACA,gDAAgD;gBACjD,EAAE,OAAO,KAAK;oBACb,QAAQ,KAAK,CAAC,sBAAsB;oBACpC,MAAM;gBACP;YACD;YAEA,QAAQ,OAAO,IAAQ;gBACtB,IAAI,CAAC,UAAU,MAAM;oBACpB,MAAM,IAAI,MAAM;gBACjB;gBACA,MAAM,OAAO,MAAM,GAAG,KAAK,CAAC,KAAK,CAC/B,KAAK,CAAC,MAAM,SAAS,SACrB,KAAK,CAAC,UAAU,SAAS,IAAI,CAAC,EAAE,EAChC,GAAG;gBACL,IAAI,CAAC,MAAM;gBACX,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;oBAC5B,IAAI,KAAK,EAAE;gBACZ;YACD;YAEA,YAAY,OACX,IACA,EACC,EAAE,EACF,MAAM,EACN,KAAK,EACL,WAAW,EACX,QAAQ,EAOR;gBAED,IAAI,CAAC,UAAU,MAAM,MAAM,IAAI,MAAM;gBAErC,oDAAoD;gBACpD,MAAM,OAAO,MAAM,GAAG,KAAK,CAAC,KAAK,CAC/B,KAAK,CAAC,MAAM,SAAS,KACrB,KAAK,CAAC,UAAU,SAAS,IAAI,CAAC,EAAE,EAChC,GAAG;gBAEL,IAAI,CAAC,MAAM;gBAEX,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAC3B;oBACC,IAAI,KAAK,EAAE;oBACX;oBACA,OAAO,SAAS;oBAChB;oBACA;oBACA,YAAY,KAAK,GAAG;gBACrB;YAEF;QACD;IACD;AACD","debugId":null}},
    {"offset": {"line": 280, "column": 0}, "map": {"version":3,"sources":["file:///Users/avy/Code/todoit/components/zero-init.tsx"],"sourcesContent":["\"use client\";\n\nimport { ReactNode } from \"react\";\nimport { ZeroProvider } from \"@rocicorp/zero/react\";\nimport { schema } from \"@/db/zero/schema\";\nimport { createMutators } from \"@/db/zero/mutators\";\n\ninterface ZeroInitProps {\n  children: ReactNode;\n  userID: string;\n  token?: string;\n}\n\nexport function ZeroInit({ children, userID, token }: ZeroInitProps) {\n  return (\n    <ZeroProvider\n      userID={userID}\n      auth={token}\n      server={process.env.NEXT_PUBLIC_API_URL}\n      schema={schema}\n      mutators={createMutators({\n        user: { id: userID },\n        session: token ? { token } : undefined,\n      })}\n    >\n      {children}\n    </ZeroProvider>\n  );\n}"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AALA;;;;;AAaO,SAAS,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAiB;IACjE,qBACE,qZAAC,0VAAY;QACX,QAAQ;QACR,MAAM;QACN,MAAM;QACN,QAAQ,8HAAM;QACd,UAAU,IAAA,wIAAc,EAAC;YACvB,MAAM;gBAAE,IAAI;YAAO;YACnB,SAAS,QAAQ;gBAAE;YAAM,IAAI;QAC/B;kBAEC;;;;;;AAGP","debugId":null}}]
}