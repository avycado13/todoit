{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/avy/Code/todoit/node_modules/.pnpm/better-auth%401.3.27_next%4015.5.4_%40opentelemetry%2Bapi%401.9.0_react-dom%4019.1.0_react%4019.1.0___ed7dd2f5da0a3d3042fc65fe0fb08700/node_modules/better-auth/dist/shared/better-auth.wna9p9JG.mjs"],"sourcesContent":["import { APIError } from 'better-call';\nimport * as z from 'zod';\nimport { a as createAuthEndpoint, g as getSessionFromCtx, s as sessionMiddleware, B as BASE_ERROR_CODES, j as requestOnlySessionMiddleware } from './better-auth.C5vDERgF.mjs';\nimport './better-auth.C3-_8m-g.mjs';\nimport './better-auth.CiuwFiHM.mjs';\nimport '@better-auth/utils/base64';\nimport '@better-auth/utils/hmac';\nimport './better-auth.DgGir396.mjs';\nimport '@better-auth/utils/binary';\nimport '@better-auth/core/db';\nimport '@better-auth/utils/random';\nimport '@better-auth/utils/hash';\nimport '@noble/ciphers/chacha.js';\nimport '@noble/ciphers/utils.js';\nimport 'jose';\nimport '@noble/hashes/scrypt.js';\nimport '@better-auth/utils/hex';\nimport '@noble/hashes/utils.js';\nimport './better-auth.B4Qoxdgc.mjs';\nimport 'kysely';\nimport { g as getDate } from './better-auth.CW6D9eSx.mjs';\nimport { B as BetterAuthError } from './better-auth.DdzSJf-n.mjs';\nimport { p as parseJSON } from './better-auth.msGOU0m9.mjs';\nimport { o as orgMiddleware, a as orgSessionMiddleware, t as teamSchema } from './better-auth.CJoIWSTC.mjs';\nimport { s as setSessionCookie } from './better-auth.DiMXeqeq.mjs';\nimport { t as toZodSchema } from './better-auth.BxexnJiR.mjs';\nimport { d as defineErrorCodes } from './better-auth.D2xndZ2p.mjs';\nimport { defaultRoles } from '../plugins/organization/access/index.mjs';\nimport { c as cacheAllRoles, h as hasPermissionFn } from './better-auth.DaEBQJp_.mjs';\n\nconst shimContext = (originalObject, newContext) => {\n  const shimmedObj = {};\n  for (const [key, value] of Object.entries(originalObject)) {\n    shimmedObj[key] = (ctx) => {\n      return value({\n        ...ctx,\n        context: {\n          ...newContext,\n          ...ctx.context\n        }\n      });\n    };\n    shimmedObj[key].path = value.path;\n    shimmedObj[key].method = value.method;\n    shimmedObj[key].options = value.options;\n    shimmedObj[key].headers = value.headers;\n  }\n  return shimmedObj;\n};\n\nconst getOrgAdapter = (context, options) => {\n  const adapter = context.adapter;\n  return {\n    findOrganizationBySlug: async (slug) => {\n      const organization = await adapter.findOne({\n        model: \"organization\",\n        where: [\n          {\n            field: \"slug\",\n            value: slug\n          }\n        ]\n      });\n      return organization;\n    },\n    createOrganization: async (data) => {\n      const organization = await adapter.create({\n        model: \"organization\",\n        data: {\n          ...data.organization,\n          metadata: data.organization.metadata ? JSON.stringify(data.organization.metadata) : void 0\n        },\n        forceAllowId: true\n      });\n      return {\n        ...organization,\n        metadata: organization.metadata && typeof organization.metadata === \"string\" ? JSON.parse(organization.metadata) : void 0\n      };\n    },\n    findMemberByEmail: async (data) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"email\",\n            value: data.email.toLowerCase()\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      const member = await adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          },\n          {\n            field: \"userId\",\n            value: user.id\n          }\n        ]\n      });\n      if (!member) {\n        return null;\n      }\n      return {\n        ...member,\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image\n        }\n      };\n    },\n    listMembers: async (data) => {\n      const members = await Promise.all([\n        adapter.findMany({\n          model: \"member\",\n          where: [\n            { field: \"organizationId\", value: data.organizationId },\n            ...data.filter?.field ? [\n              {\n                field: data.filter?.field,\n                value: data.filter?.value\n              }\n            ] : []\n          ],\n          limit: data.limit || options?.membershipLimit || 100,\n          offset: data.offset || 0,\n          sortBy: data.sortBy ? { field: data.sortBy, direction: data.sortOrder || \"asc\" } : void 0\n        }),\n        adapter.count({\n          model: \"member\",\n          where: [\n            { field: \"organizationId\", value: data.organizationId },\n            ...data.filter?.field ? [\n              {\n                field: data.filter?.field,\n                value: data.filter?.value\n              }\n            ] : []\n          ]\n        })\n      ]);\n      const users = await adapter.findMany({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: members[0].map((member) => member.userId),\n            operator: \"in\"\n          }\n        ]\n      });\n      return {\n        members: members[0].map((member) => {\n          const user = users.find((user2) => user2.id === member.userId);\n          if (!user) {\n            throw new BetterAuthError(\n              \"Unexpected error: User not found for member\"\n            );\n          }\n          return {\n            ...member,\n            user: {\n              id: user.id,\n              name: user.name,\n              email: user.email,\n              image: user.image\n            }\n          };\n        }),\n        total: members[1]\n      };\n    },\n    findMemberByOrgId: async (data) => {\n      const [member, user] = await Promise.all([\n        await adapter.findOne({\n          model: \"member\",\n          where: [\n            {\n              field: \"userId\",\n              value: data.userId\n            },\n            {\n              field: \"organizationId\",\n              value: data.organizationId\n            }\n          ]\n        }),\n        await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              field: \"id\",\n              value: data.userId\n            }\n          ]\n        })\n      ]);\n      if (!user || !member) {\n        return null;\n      }\n      return {\n        ...member,\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image\n        }\n      };\n    },\n    findMemberById: async (memberId) => {\n      const member = await adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"id\",\n            value: memberId\n          }\n        ]\n      });\n      if (!member) {\n        return null;\n      }\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: member.userId\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      return {\n        ...member,\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image\n        }\n      };\n    },\n    createMember: async (data) => {\n      const member = await adapter.create({\n        model: \"member\",\n        data: {\n          ...data,\n          createdAt: /* @__PURE__ */ new Date()\n        }\n      });\n      return member;\n    },\n    updateMember: async (memberId, role) => {\n      const member = await adapter.update({\n        model: \"member\",\n        where: [\n          {\n            field: \"id\",\n            value: memberId\n          }\n        ],\n        update: {\n          role\n        }\n      });\n      return member;\n    },\n    deleteMember: async (memberId) => {\n      const member = await adapter.delete({\n        model: \"member\",\n        where: [\n          {\n            field: \"id\",\n            value: memberId\n          }\n        ]\n      });\n      return member;\n    },\n    updateOrganization: async (organizationId, data) => {\n      const organization = await adapter.update({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationId\n          }\n        ],\n        update: {\n          ...data,\n          metadata: typeof data.metadata === \"object\" ? JSON.stringify(data.metadata) : data.metadata\n        }\n      });\n      if (!organization) {\n        return null;\n      }\n      return {\n        ...organization,\n        metadata: organization.metadata ? parseJSON(organization.metadata) : void 0\n      };\n    },\n    deleteOrganization: async (organizationId) => {\n      await adapter.delete({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      await adapter.delete({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      await adapter.delete({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationId\n          }\n        ]\n      });\n      return organizationId;\n    },\n    setActiveOrganization: async (sessionToken, organizationId, ctx) => {\n      const session = await context.internalAdapter.updateSession(\n        sessionToken,\n        {\n          activeOrganizationId: organizationId\n        },\n        ctx\n      );\n      return session;\n    },\n    findOrganizationById: async (organizationId) => {\n      const organization = await adapter.findOne({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationId\n          }\n        ]\n      });\n      return organization;\n    },\n    checkMembership: async ({\n      userId,\n      organizationId\n    }) => {\n      const member = await adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          },\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      return member;\n    },\n    /**\n     * @requires db\n     */\n    findFullOrganization: async ({\n      organizationId,\n      isSlug,\n      includeTeams,\n      membersLimit\n    }) => {\n      const org = await adapter.findOne({\n        model: \"organization\",\n        where: [{ field: isSlug ? \"slug\" : \"id\", value: organizationId }]\n      });\n      if (!org) {\n        return null;\n      }\n      const [invitations, members, teams] = await Promise.all([\n        adapter.findMany({\n          model: \"invitation\",\n          where: [{ field: \"organizationId\", value: org.id }]\n        }),\n        adapter.findMany({\n          model: \"member\",\n          where: [{ field: \"organizationId\", value: org.id }],\n          limit: membersLimit ?? options?.membershipLimit ?? 100\n        }),\n        includeTeams ? adapter.findMany({\n          model: \"team\",\n          where: [{ field: \"organizationId\", value: org.id }]\n        }) : null\n      ]);\n      if (!org) return null;\n      const userIds = members.map((member) => member.userId);\n      const users = userIds.length > 0 ? await adapter.findMany({\n        model: \"user\",\n        where: [{ field: \"id\", value: userIds, operator: \"in\" }],\n        limit: options?.membershipLimit || 100\n      }) : [];\n      const userMap = new Map(users.map((user) => [user.id, user]));\n      const membersWithUsers = members.map((member) => {\n        const user = userMap.get(member.userId);\n        if (!user) {\n          throw new BetterAuthError(\n            \"Unexpected error: User not found for member\"\n          );\n        }\n        return {\n          ...member,\n          user: {\n            id: user.id,\n            name: user.name,\n            email: user.email,\n            image: user.image\n          }\n        };\n      });\n      return {\n        ...org,\n        invitations,\n        members: membersWithUsers,\n        teams\n      };\n    },\n    listOrganizations: async (userId) => {\n      const members = await adapter.findMany({\n        model: \"member\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      if (!members || members.length === 0) {\n        return [];\n      }\n      const organizationIds = members.map((member) => member.organizationId);\n      const organizations = await adapter.findMany({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationIds,\n            operator: \"in\"\n          }\n        ]\n      });\n      return organizations;\n    },\n    createTeam: async (data) => {\n      const team = await adapter.create({\n        model: \"team\",\n        data\n      });\n      return team;\n    },\n    findTeamById: async ({\n      teamId,\n      organizationId,\n      includeTeamMembers\n    }) => {\n      const team = await adapter.findOne({\n        model: \"team\",\n        where: [\n          {\n            field: \"id\",\n            value: teamId\n          },\n          ...organizationId ? [\n            {\n              field: \"organizationId\",\n              value: organizationId\n            }\n          ] : []\n        ]\n      });\n      if (!team) {\n        return null;\n      }\n      let members = [];\n      if (includeTeamMembers) {\n        members = await adapter.findMany({\n          model: \"teamMember\",\n          where: [\n            {\n              field: \"teamId\",\n              value: teamId\n            }\n          ],\n          limit: options?.membershipLimit || 100\n        });\n        return {\n          ...team,\n          members\n        };\n      }\n      return team;\n    },\n    updateTeam: async (teamId, data) => {\n      if (\"id\" in data) data.id = void 0;\n      const team = await adapter.update({\n        model: \"team\",\n        where: [\n          {\n            field: \"id\",\n            value: teamId\n          }\n        ],\n        update: {\n          ...data\n        }\n      });\n      return team;\n    },\n    deleteTeam: async (teamId) => {\n      await adapter.deleteMany({\n        model: \"teamMember\",\n        where: [\n          {\n            field: \"teamId\",\n            value: teamId\n          }\n        ]\n      });\n      const team = await adapter.delete({\n        model: \"team\",\n        where: [\n          {\n            field: \"id\",\n            value: teamId\n          }\n        ]\n      });\n      return team;\n    },\n    listTeams: async (organizationId) => {\n      const teams = await adapter.findMany({\n        model: \"team\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      return teams;\n    },\n    createTeamInvitation: async ({\n      email,\n      role,\n      teamId,\n      organizationId,\n      inviterId,\n      expiresIn = 1e3 * 60 * 60 * 48\n      // Default expiration: 48 hours\n    }) => {\n      const expiresAt = getDate(expiresIn);\n      const invitation = await adapter.create({\n        model: \"invitation\",\n        data: {\n          email,\n          role,\n          organizationId,\n          teamId,\n          inviterId,\n          status: \"pending\",\n          expiresAt\n        }\n      });\n      return invitation;\n    },\n    setActiveTeam: async (sessionToken, teamId, ctx) => {\n      const session = await context.internalAdapter.updateSession(\n        sessionToken,\n        {\n          activeTeamId: teamId\n        },\n        ctx\n      );\n      return session;\n    },\n    listTeamMembers: async (data) => {\n      const members = await adapter.findMany({\n        model: \"teamMember\",\n        where: [\n          {\n            field: \"teamId\",\n            value: data.teamId\n          }\n        ]\n      });\n      return members;\n    },\n    countTeamMembers: async (data) => {\n      const count = await adapter.count({\n        model: \"teamMember\",\n        where: [{ field: \"teamId\", value: data.teamId }]\n      });\n      return count;\n    },\n    countMembers: async (data) => {\n      const count = await adapter.count({\n        model: \"member\",\n        where: [{ field: \"organizationId\", value: data.organizationId }]\n      });\n      return count;\n    },\n    listTeamsByUser: async (data) => {\n      const members = await adapter.findMany({\n        model: \"teamMember\",\n        where: [\n          {\n            field: \"userId\",\n            value: data.userId\n          }\n        ]\n      });\n      const teams = await adapter.findMany({\n        model: \"team\",\n        where: [\n          {\n            field: \"id\",\n            operator: \"in\",\n            value: members.map((m) => m.teamId)\n          }\n        ]\n      });\n      return teams;\n    },\n    findTeamMember: async (data) => {\n      const member = await adapter.findOne({\n        model: \"teamMember\",\n        where: [\n          {\n            field: \"teamId\",\n            value: data.teamId\n          },\n          {\n            field: \"userId\",\n            value: data.userId\n          }\n        ]\n      });\n      return member;\n    },\n    findOrCreateTeamMember: async (data) => {\n      const member = await adapter.findOne({\n        model: \"teamMember\",\n        where: [\n          {\n            field: \"teamId\",\n            value: data.teamId\n          },\n          {\n            field: \"userId\",\n            value: data.userId\n          }\n        ]\n      });\n      if (member) return member;\n      return await adapter.create({\n        model: \"teamMember\",\n        data: {\n          teamId: data.teamId,\n          userId: data.userId,\n          createdAt: /* @__PURE__ */ new Date()\n        }\n      });\n    },\n    removeTeamMember: async (data) => {\n      await adapter.delete({\n        model: \"teamMember\",\n        where: [\n          {\n            field: \"teamId\",\n            value: data.teamId\n          },\n          {\n            field: \"userId\",\n            value: data.userId\n          }\n        ]\n      });\n    },\n    findInvitationsByTeamId: async (teamId) => {\n      const invitations = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"teamId\",\n            value: teamId\n          }\n        ]\n      });\n      return invitations;\n    },\n    listUserInvitations: async (email) => {\n      const invitations = await adapter.findMany({\n        model: \"invitation\",\n        where: [{ field: \"email\", value: email.toLowerCase() }]\n      });\n      return invitations;\n    },\n    createInvitation: async ({\n      invitation,\n      user\n    }) => {\n      const defaultExpiration = 60 * 60 * 48;\n      const expiresAt = getDate(\n        options?.invitationExpiresIn || defaultExpiration,\n        \"sec\"\n      );\n      const invite = await adapter.create({\n        model: \"invitation\",\n        data: {\n          status: \"pending\",\n          expiresAt,\n          inviterId: user.id,\n          ...invitation,\n          teamId: invitation.teamIds.length > 0 ? invitation.teamIds.join(\",\") : null\n        }\n      });\n      return invite;\n    },\n    findInvitationById: async (id) => {\n      const invitation = await adapter.findOne({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"id\",\n            value: id\n          }\n        ]\n      });\n      return invitation;\n    },\n    findPendingInvitation: async (data) => {\n      const invitation = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"email\",\n            value: data.email.toLowerCase()\n          },\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          },\n          {\n            field: \"status\",\n            value: \"pending\"\n          }\n        ]\n      });\n      return invitation.filter(\n        (invite) => new Date(invite.expiresAt) > /* @__PURE__ */ new Date()\n      );\n    },\n    findPendingInvitations: async (data) => {\n      const invitations = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          },\n          {\n            field: \"status\",\n            value: \"pending\"\n          }\n        ]\n      });\n      return invitations.filter(\n        (invite) => new Date(invite.expiresAt) > /* @__PURE__ */ new Date()\n      );\n    },\n    listInvitations: async (data) => {\n      const invitations = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          }\n        ]\n      });\n      return invitations;\n    },\n    updateInvitation: async (data) => {\n      const invitation = await adapter.update({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"id\",\n            value: data.invitationId\n          }\n        ],\n        update: {\n          status: data.status\n        }\n      });\n      return invitation;\n    }\n  };\n};\n\nconst ORGANIZATION_ERROR_CODES = defineErrorCodes({\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION: \"You are not allowed to create a new organization\",\n  YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS: \"You have reached the maximum number of organizations\",\n  ORGANIZATION_ALREADY_EXISTS: \"Organization already exists\",\n  ORGANIZATION_NOT_FOUND: \"Organization not found\",\n  USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION: \"User is not a member of the organization\",\n  YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION: \"You are not allowed to update this organization\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION: \"You are not allowed to delete this organization\",\n  NO_ACTIVE_ORGANIZATION: \"No active organization\",\n  USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION: \"User is already a member of this organization\",\n  MEMBER_NOT_FOUND: \"Member not found\",\n  ROLE_NOT_FOUND: \"Role not found\",\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_TEAM: \"You are not allowed to create a new team\",\n  TEAM_ALREADY_EXISTS: \"Team already exists\",\n  TEAM_NOT_FOUND: \"Team not found\",\n  YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER: \"You cannot leave the organization as the only owner\",\n  YOU_CANNOT_LEAVE_THE_ORGANIZATION_WITHOUT_AN_OWNER: \"You cannot leave the organization without an owner\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER: \"You are not allowed to delete this member\",\n  YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION: \"You are not allowed to invite users to this organization\",\n  USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION: \"User is already invited to this organization\",\n  INVITATION_NOT_FOUND: \"Invitation not found\",\n  YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION: \"You are not the recipient of the invitation\",\n  EMAIL_VERIFICATION_REQUIRED_BEFORE_ACCEPTING_OR_REJECTING_INVITATION: \"Email verification required before accepting or rejecting invitation\",\n  YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION: \"You are not allowed to cancel this invitation\",\n  INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION: \"Inviter is no longer a member of the organization\",\n  YOU_ARE_NOT_ALLOWED_TO_INVITE_USER_WITH_THIS_ROLE: \"You are not allowed to invite a user with this role\",\n  FAILED_TO_RETRIEVE_INVITATION: \"Failed to retrieve invitation\",\n  YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_TEAMS: \"You have reached the maximum number of teams\",\n  UNABLE_TO_REMOVE_LAST_TEAM: \"Unable to remove last team\",\n  YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER: \"You are not allowed to update this member\",\n  ORGANIZATION_MEMBERSHIP_LIMIT_REACHED: \"Organization membership limit reached\",\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_TEAMS_IN_THIS_ORGANIZATION: \"You are not allowed to create teams in this organization\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_TEAMS_IN_THIS_ORGANIZATION: \"You are not allowed to delete teams in this organization\",\n  YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM: \"You are not allowed to update this team\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_TEAM: \"You are not allowed to delete this team\",\n  INVITATION_LIMIT_REACHED: \"Invitation limit reached\",\n  TEAM_MEMBER_LIMIT_REACHED: \"Team member limit reached\",\n  USER_IS_NOT_A_MEMBER_OF_THE_TEAM: \"User is not a member of the team\",\n  YOU_CAN_NOT_ACCESS_THE_MEMBERS_OF_THIS_TEAM: \"You are not allowed to list the members of this team\",\n  YOU_DO_NOT_HAVE_AN_ACTIVE_TEAM: \"You do not have an active team\",\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_TEAM_MEMBER: \"You are not allowed to create a new member\",\n  YOU_ARE_NOT_ALLOWED_TO_REMOVE_A_TEAM_MEMBER: \"You are not allowed to remove a team member\",\n  YOU_ARE_NOT_ALLOWED_TO_ACCESS_THIS_ORGANIZATION: \"You are not allowed to access this organization as an owner\",\n  YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION: \"You are not a member of this organization\",\n  MISSING_AC_INSTANCE: \"Dynamic Access Control requires a pre-defined ac instance on the server auth plugin. Read server logs for more information\",\n  YOU_MUST_BE_IN_AN_ORGANIZATION_TO_CREATE_A_ROLE: \"You must be in an organization to create a role\",\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_A_ROLE: \"You are not allowed to create a role\",\n  YOU_ARE_NOT_ALLOWED_TO_UPDATE_A_ROLE: \"You are not allowed to update a role\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_A_ROLE: \"You are not allowed to delete a role\",\n  YOU_ARE_NOT_ALLOWED_TO_READ_A_ROLE: \"You are not allowed to read a role\",\n  YOU_ARE_NOT_ALLOWED_TO_LIST_A_ROLE: \"You are not allowed to list a role\",\n  YOU_ARE_NOT_ALLOWED_TO_GET_A_ROLE: \"You are not allowed to get a role\",\n  TOO_MANY_ROLES: \"This organization has too many roles\",\n  INVALID_RESOURCE: \"The provided permission includes an invalid resource\",\n  ROLE_NAME_IS_ALREADY_TAKEN: \"That role name is already taken\",\n  CANNOT_DELETE_A_PRE_DEFINED_ROLE: \"Cannot delete a pre-defined role\"\n});\n\nconst hasPermission = async (input, ctx) => {\n  let acRoles = { ...input.options.roles || defaultRoles };\n  if (ctx && input.organizationId && input.options.dynamicAccessControl?.enabled && input.options.ac && !input.useMemoryCache) {\n    const roles = await ctx.context.adapter.findMany({\n      model: \"organizationRole\",\n      where: [\n        {\n          field: \"organizationId\",\n          value: input.organizationId\n        }\n      ]\n    });\n    for (const { role, permission: permissionsString } of roles) {\n      if (role in acRoles) continue;\n      const result = z.record(z.string(), z.array(z.string())).safeParse(JSON.parse(permissionsString));\n      if (!result.success) {\n        ctx.context.logger.error(\n          \"[hasPermission] Invalid permissions for role \" + role,\n          {\n            permissions: JSON.parse(permissionsString)\n          }\n        );\n        throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n          message: \"Invalid permissions for role \" + role\n        });\n      }\n      acRoles[role] = input.options.ac.newRole(result.data);\n    }\n  }\n  if (input.useMemoryCache) {\n    acRoles = cacheAllRoles.get(input.organizationId) || acRoles;\n  }\n  cacheAllRoles.set(input.organizationId, acRoles);\n  return hasPermissionFn(input, acRoles);\n};\n\nconst createInvitation = (option) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: option?.schema?.invitation?.additionalFields || {},\n    isClientSide: true\n  });\n  const baseSchema = z.object({\n    email: z.string().meta({\n      description: \"The email address of the user to invite\"\n    }),\n    role: z.union([\n      z.string().meta({\n        description: \"The role to assign to the user\"\n      }),\n      z.array(\n        z.string().meta({\n          description: \"The roles to assign to the user\"\n        })\n      )\n    ]).meta({\n      description: 'The role(s) to assign to the user. It can be `admin`, `member`, or `guest`. Eg: \"member\"'\n    }),\n    organizationId: z.string().meta({\n      description: \"The organization ID to invite the user to\"\n    }).optional(),\n    resend: z.boolean().meta({\n      description: \"Resend the invitation email, if the user is already invited. Eg: true\"\n    }).optional(),\n    teamId: z.union([\n      z.string().meta({\n        description: \"The team ID to invite the user to\"\n      }).optional(),\n      z.array(z.string()).meta({\n        description: \"The team IDs to invite the user to\"\n      }).optional()\n    ])\n  });\n  return createAuthEndpoint(\n    \"/organization/invite-member\",\n    {\n      method: \"POST\",\n      use: [orgMiddleware, orgSessionMiddleware],\n      body: z.object({\n        ...baseSchema.shape,\n        ...additionalFieldsSchema.shape\n      }),\n      metadata: {\n        $Infer: {\n          body: {}\n        },\n        openapi: {\n          description: \"Invite a user to an organization\",\n          responses: {\n            \"200\": {\n              description: \"Success\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\"\n                      },\n                      email: {\n                        type: \"string\"\n                      },\n                      role: {\n                        type: \"string\"\n                      },\n                      organizationId: {\n                        type: \"string\"\n                      },\n                      inviterId: {\n                        type: \"string\"\n                      },\n                      status: {\n                        type: \"string\"\n                      },\n                      expiresAt: {\n                        type: \"string\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"email\",\n                      \"role\",\n                      \"organizationId\",\n                      \"inviterId\",\n                      \"status\",\n                      \"expiresAt\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = ctx.context.session;\n      const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n      if (!organizationId) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, option);\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n        });\n      }\n      const canInvite = await hasPermission(\n        {\n          role: member.role,\n          options: ctx.context.orgOptions,\n          permissions: {\n            invitation: [\"create\"]\n          },\n          organizationId\n        },\n        ctx\n      );\n      if (!canInvite) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION\n        });\n      }\n      const creatorRole = ctx.context.orgOptions.creatorRole || \"owner\";\n      const roles = parseRoles(ctx.body.role);\n      if (member.role !== creatorRole && roles.split(\",\").includes(creatorRole)) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USER_WITH_THIS_ROLE\n        });\n      }\n      const alreadyMember = await adapter.findMemberByEmail({\n        email: ctx.body.email,\n        organizationId\n      });\n      if (alreadyMember) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION\n        });\n      }\n      const alreadyInvited = await adapter.findPendingInvitation({\n        email: ctx.body.email,\n        organizationId\n      });\n      if (alreadyInvited.length && !ctx.body.resend) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION\n        });\n      }\n      const organization = await adapter.findOrganizationById(organizationId);\n      if (!organization) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      if (alreadyInvited.length && ctx.body.resend) {\n        const existingInvitation = alreadyInvited[0];\n        const defaultExpiration = 60 * 60 * 48;\n        const newExpiresAt = getDate(\n          ctx.context.orgOptions.invitationExpiresIn || defaultExpiration,\n          \"sec\"\n        );\n        await ctx.context.adapter.update({\n          model: \"invitation\",\n          where: [\n            {\n              field: \"id\",\n              value: existingInvitation.id\n            }\n          ],\n          update: {\n            expiresAt: newExpiresAt\n          }\n        });\n        const updatedInvitation = {\n          ...existingInvitation,\n          expiresAt: newExpiresAt\n        };\n        await ctx.context.orgOptions.sendInvitationEmail?.(\n          {\n            id: updatedInvitation.id,\n            role: updatedInvitation.role,\n            email: updatedInvitation.email.toLowerCase(),\n            organization,\n            inviter: {\n              ...member,\n              user: session.user\n            },\n            invitation: updatedInvitation\n          },\n          ctx.request\n        );\n        return ctx.json(updatedInvitation);\n      }\n      if (alreadyInvited.length && ctx.context.orgOptions.cancelPendingInvitationsOnReInvite) {\n        await adapter.updateInvitation({\n          invitationId: alreadyInvited[0].id,\n          status: \"canceled\"\n        });\n      }\n      const invitationLimit = typeof ctx.context.orgOptions.invitationLimit === \"function\" ? await ctx.context.orgOptions.invitationLimit(\n        {\n          user: session.user,\n          organization,\n          member\n        },\n        ctx.context\n      ) : ctx.context.orgOptions.invitationLimit ?? 100;\n      const pendingInvitations = await adapter.findPendingInvitations({\n        organizationId\n      });\n      if (pendingInvitations.length >= invitationLimit) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.INVITATION_LIMIT_REACHED\n        });\n      }\n      if (ctx.context.orgOptions.teams && ctx.context.orgOptions.teams.enabled && typeof ctx.context.orgOptions.teams.maximumMembersPerTeam !== \"undefined\" && \"teamId\" in ctx.body && ctx.body.teamId) {\n        const teamIds2 = typeof ctx.body.teamId === \"string\" ? [ctx.body.teamId] : ctx.body.teamId;\n        for (const teamId of teamIds2) {\n          const team = await adapter.findTeamById({\n            teamId,\n            organizationId,\n            includeTeamMembers: true\n          });\n          if (!team) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n            });\n          }\n          const maximumMembersPerTeam = typeof ctx.context.orgOptions.teams.maximumMembersPerTeam === \"function\" ? await ctx.context.orgOptions.teams.maximumMembersPerTeam({\n            teamId,\n            session,\n            organizationId\n          }) : ctx.context.orgOptions.teams.maximumMembersPerTeam;\n          if (team.members.length >= maximumMembersPerTeam) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ORGANIZATION_ERROR_CODES.TEAM_MEMBER_LIMIT_REACHED\n            });\n          }\n        }\n      }\n      const teamIds = \"teamId\" in ctx.body ? typeof ctx.body.teamId === \"string\" ? [ctx.body.teamId] : ctx.body.teamId ?? [] : [];\n      const {\n        email: _,\n        role: __,\n        organizationId: ___,\n        resend: ____,\n        ...additionalFields\n      } = ctx.body;\n      let invitationData = {\n        role: roles,\n        email: ctx.body.email.toLowerCase(),\n        organizationId,\n        teamIds,\n        ...additionalFields ? additionalFields : {}\n      };\n      if (option?.organizationHooks?.beforeCreateInvitation) {\n        const response = await option?.organizationHooks.beforeCreateInvitation(\n          {\n            invitation: {\n              ...invitationData,\n              inviterId: session.user.id,\n              teamId: teamIds.length > 0 ? teamIds[0] : void 0\n            },\n            inviter: session.user,\n            organization\n          }\n        );\n        if (response && typeof response === \"object\" && \"data\" in response) {\n          invitationData = {\n            ...invitationData,\n            ...response.data\n          };\n        }\n      }\n      const invitation = await adapter.createInvitation({\n        invitation: invitationData,\n        user: session.user\n      });\n      await ctx.context.orgOptions.sendInvitationEmail?.(\n        {\n          id: invitation.id,\n          role: invitation.role,\n          email: invitation.email.toLowerCase(),\n          organization,\n          inviter: {\n            ...member,\n            user: session.user\n          },\n          //@ts-expect-error\n          invitation\n        },\n        ctx.request\n      );\n      if (option?.organizationHooks?.afterCreateInvitation) {\n        await option?.organizationHooks.afterCreateInvitation({\n          invitation,\n          inviter: session.user,\n          organization\n        });\n      }\n      return ctx.json(invitation);\n    }\n  );\n};\nconst acceptInvitation = (options) => createAuthEndpoint(\n  \"/organization/accept-invitation\",\n  {\n    method: \"POST\",\n    body: z.object({\n      invitationId: z.string().meta({\n        description: \"The ID of the invitation to accept\"\n      })\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Accept an invitation to an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    invitation: {\n                      type: \"object\"\n                    },\n                    member: {\n                      type: \"object\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, options);\n    const invitation = await adapter.findInvitationById(\n      ctx.body.invitationId\n    );\n    if (!invitation || invitation.expiresAt < /* @__PURE__ */ new Date() || invitation.status !== \"pending\") {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND\n      });\n    }\n    if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION\n      });\n    }\n    if (ctx.context.orgOptions.requireEmailVerificationOnInvitation && !session.user.emailVerified) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.EMAIL_VERIFICATION_REQUIRED_BEFORE_ACCEPTING_OR_REJECTING_INVITATION\n      });\n    }\n    const membershipLimit = ctx.context.orgOptions?.membershipLimit || 100;\n    const membersCount = await adapter.countMembers({\n      organizationId: invitation.organizationId\n    });\n    if (membersCount >= membershipLimit) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_MEMBERSHIP_LIMIT_REACHED\n      });\n    }\n    const organization = await adapter.findOrganizationById(\n      invitation.organizationId\n    );\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    if (options?.organizationHooks?.beforeAcceptInvitation) {\n      await options?.organizationHooks.beforeAcceptInvitation({\n        invitation,\n        user: session.user,\n        organization\n      });\n    }\n    const acceptedI = await adapter.updateInvitation({\n      invitationId: ctx.body.invitationId,\n      status: \"accepted\"\n    });\n    if (!acceptedI) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.FAILED_TO_RETRIEVE_INVITATION\n      });\n    }\n    if (ctx.context.orgOptions.teams && ctx.context.orgOptions.teams.enabled && \"teamId\" in acceptedI && acceptedI.teamId) {\n      const teamIds = acceptedI.teamId.split(\",\");\n      const onlyOne = teamIds.length === 1;\n      for (const teamId of teamIds) {\n        await adapter.findOrCreateTeamMember({\n          teamId,\n          userId: session.user.id\n        });\n        if (typeof ctx.context.orgOptions.teams.maximumMembersPerTeam !== \"undefined\") {\n          const members = await adapter.countTeamMembers({ teamId });\n          const maximumMembersPerTeam = typeof ctx.context.orgOptions.teams.maximumMembersPerTeam === \"function\" ? await ctx.context.orgOptions.teams.maximumMembersPerTeam({\n            teamId,\n            session,\n            organizationId: invitation.organizationId\n          }) : ctx.context.orgOptions.teams.maximumMembersPerTeam;\n          if (members >= maximumMembersPerTeam) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ORGANIZATION_ERROR_CODES.TEAM_MEMBER_LIMIT_REACHED\n            });\n          }\n        }\n      }\n      if (onlyOne) {\n        const teamId = teamIds[0];\n        const updatedSession = await adapter.setActiveTeam(\n          session.session.token,\n          teamId,\n          ctx\n        );\n        await setSessionCookie(ctx, {\n          session: updatedSession,\n          user: session.user\n        });\n      }\n    }\n    const member = await adapter.createMember({\n      organizationId: invitation.organizationId,\n      userId: session.user.id,\n      role: invitation.role,\n      createdAt: /* @__PURE__ */ new Date()\n    });\n    await adapter.setActiveOrganization(\n      session.session.token,\n      invitation.organizationId,\n      ctx\n    );\n    if (!acceptedI) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND\n        }\n      });\n    }\n    if (options?.organizationHooks?.afterAcceptInvitation) {\n      await options?.organizationHooks.afterAcceptInvitation({\n        invitation: acceptedI,\n        member,\n        user: session.user,\n        organization\n      });\n    }\n    return ctx.json({\n      invitation: acceptedI,\n      member\n    });\n  }\n);\nconst rejectInvitation = (options) => createAuthEndpoint(\n  \"/organization/reject-invitation\",\n  {\n    method: \"POST\",\n    body: z.object({\n      invitationId: z.string().meta({\n        description: \"The ID of the invitation to reject\"\n      })\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Reject an invitation to an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    invitation: {\n                      type: \"object\"\n                    },\n                    member: {\n                      type: \"null\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const invitation = await adapter.findInvitationById(\n      ctx.body.invitationId\n    );\n    if (!invitation || invitation.expiresAt < /* @__PURE__ */ new Date() || invitation.status !== \"pending\") {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Invitation not found!\"\n      });\n    }\n    if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION\n      });\n    }\n    if (ctx.context.orgOptions.requireEmailVerificationOnInvitation && !session.user.emailVerified) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.EMAIL_VERIFICATION_REQUIRED_BEFORE_ACCEPTING_OR_REJECTING_INVITATION\n      });\n    }\n    const organization = await adapter.findOrganizationById(\n      invitation.organizationId\n    );\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    if (options?.organizationHooks?.beforeRejectInvitation) {\n      await options?.organizationHooks.beforeRejectInvitation({\n        invitation,\n        user: session.user,\n        organization\n      });\n    }\n    const rejectedI = await adapter.updateInvitation({\n      invitationId: ctx.body.invitationId,\n      status: \"rejected\"\n    });\n    if (options?.organizationHooks?.afterRejectInvitation) {\n      await options?.organizationHooks.afterRejectInvitation({\n        invitation: rejectedI || invitation,\n        user: session.user,\n        organization\n      });\n    }\n    return ctx.json({\n      invitation: rejectedI,\n      member: null\n    });\n  }\n);\nconst cancelInvitation = (options) => createAuthEndpoint(\n  \"/organization/cancel-invitation\",\n  {\n    method: \"POST\",\n    body: z.object({\n      invitationId: z.string().meta({\n        description: \"The ID of the invitation to cancel\"\n      })\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    openapi: {\n      description: \"Cancel an invitation to an organization\",\n      responses: {\n        \"200\": {\n          description: \"Success\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  invitation: {\n                    type: \"object\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, options);\n    const invitation = await adapter.findInvitationById(\n      ctx.body.invitationId\n    );\n    if (!invitation) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND\n      });\n    }\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: invitation.organizationId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const canCancel = await hasPermission(\n      {\n        role: member.role,\n        options: ctx.context.orgOptions,\n        permissions: {\n          invitation: [\"cancel\"]\n        },\n        organizationId: invitation.organizationId\n      },\n      ctx\n    );\n    if (!canCancel) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION\n      });\n    }\n    const organization = await adapter.findOrganizationById(\n      invitation.organizationId\n    );\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    if (options?.organizationHooks?.beforeCancelInvitation) {\n      await options?.organizationHooks.beforeCancelInvitation({\n        invitation,\n        cancelledBy: session.user,\n        organization\n      });\n    }\n    const canceledI = await adapter.updateInvitation({\n      invitationId: ctx.body.invitationId,\n      status: \"canceled\"\n    });\n    if (options?.organizationHooks?.afterCancelInvitation) {\n      await options?.organizationHooks.afterCancelInvitation({\n        invitation: canceledI || invitation,\n        cancelledBy: session.user,\n        organization\n      });\n    }\n    return ctx.json(canceledI);\n  }\n);\nconst getInvitation = (options) => createAuthEndpoint(\n  \"/organization/get-invitation\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware],\n    requireHeaders: true,\n    query: z.object({\n      id: z.string().meta({\n        description: \"The ID of the invitation to get\"\n      })\n    }),\n    metadata: {\n      openapi: {\n        description: \"Get an invitation by ID\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    id: {\n                      type: \"string\"\n                    },\n                    email: {\n                      type: \"string\"\n                    },\n                    role: {\n                      type: \"string\"\n                    },\n                    organizationId: {\n                      type: \"string\"\n                    },\n                    inviterId: {\n                      type: \"string\"\n                    },\n                    status: {\n                      type: \"string\"\n                    },\n                    expiresAt: {\n                      type: \"string\"\n                    },\n                    organizationName: {\n                      type: \"string\"\n                    },\n                    organizationSlug: {\n                      type: \"string\"\n                    },\n                    inviterEmail: {\n                      type: \"string\"\n                    }\n                  },\n                  required: [\n                    \"id\",\n                    \"email\",\n                    \"role\",\n                    \"organizationId\",\n                    \"inviterId\",\n                    \"status\",\n                    \"expiresAt\",\n                    \"organizationName\",\n                    \"organizationSlug\",\n                    \"inviterEmail\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: \"Not authenticated\"\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const invitation = await adapter.findInvitationById(ctx.query.id);\n    if (!invitation || invitation.status !== \"pending\" || invitation.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Invitation not found!\"\n      });\n    }\n    if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION\n      });\n    }\n    const organization = await adapter.findOrganizationById(\n      invitation.organizationId\n    );\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const member = await adapter.findMemberByOrgId({\n      userId: invitation.inviterId,\n      organizationId: invitation.organizationId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    return ctx.json({\n      ...invitation,\n      organizationName: organization.name,\n      organizationSlug: organization.slug,\n      inviterEmail: member.user.email\n    });\n  }\n);\nconst listInvitations = (options) => createAuthEndpoint(\n  \"/organization/list-invitations\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware, orgSessionMiddleware],\n    query: z.object({\n      organizationId: z.string().meta({\n        description: \"The ID of the organization to list invitations for\"\n      }).optional()\n    }).optional()\n  },\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: \"Not authenticated\"\n      });\n    }\n    const orgId = ctx.query?.organizationId || session.session.activeOrganizationId;\n    if (!orgId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Organization ID is required\"\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const isMember = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: orgId\n    });\n    if (!isMember) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: \"You are not a member of this organization\"\n      });\n    }\n    const invitations = await adapter.listInvitations({\n      organizationId: orgId\n    });\n    return ctx.json(invitations);\n  }\n);\nconst listUserInvitations = (options) => createAuthEndpoint(\n  \"/organization/list-user-invitations\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware],\n    query: z.object({\n      email: z.string().meta({\n        description: \"The email of the user to list invitations for. This only works for server side API calls.\"\n      }).optional()\n    }).optional()\n  },\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (ctx.request && ctx.query?.email) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"User email cannot be passed for client side API calls.\"\n      });\n    }\n    const userEmail = session?.user.email || ctx.query?.email;\n    if (!userEmail) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Missing session headers, or email query parameter.\"\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const invitations = await adapter.listUserInvitations(userEmail);\n    return ctx.json(invitations);\n  }\n);\n\nconst addMember = (option) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: option?.schema?.member?.additionalFields || {},\n    isClientSide: true\n  });\n  const baseSchema = z.object({\n    userId: z.coerce.string().meta({\n      description: 'The user Id which represents the user to be added as a member. If `null` is provided, then it\\'s expected to provide session headers. Eg: \"user-id\"'\n    }),\n    role: z.union([z.string(), z.array(z.string())]).meta({\n      description: 'The role(s) to assign to the new member. Eg: [\"admin\", \"sale\"]'\n    }),\n    organizationId: z.string().meta({\n      description: `An optional organization ID to pass. If not provided, will default to the user's active organization. Eg: \"org-id\"`\n    }).optional(),\n    teamId: z.string().meta({\n      description: 'An optional team ID to add the member to. Eg: \"team-id\"'\n    }).optional()\n  });\n  return createAuthEndpoint(\n    \"/organization/add-member\",\n    {\n      method: \"POST\",\n      body: z.object({\n        ...baseSchema.shape,\n        ...additionalFieldsSchema.shape\n      }),\n      use: [orgMiddleware],\n      metadata: {\n        SERVER_ONLY: true,\n        $Infer: {\n          body: {}\n        }\n      }\n    },\n    async (ctx) => {\n      const session = ctx.body.userId ? await getSessionFromCtx(ctx).catch((e) => null) : null;\n      const orgId = ctx.body.organizationId || session?.session.activeOrganizationId;\n      if (!orgId) {\n        return ctx.json(null, {\n          status: 400,\n          body: {\n            message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n          }\n        });\n      }\n      const teamId = \"teamId\" in ctx.body ? ctx.body.teamId : void 0;\n      if (teamId && !ctx.context.orgOptions.teams?.enabled) {\n        ctx.context.logger.error(\"Teams are not enabled\");\n        throw new APIError(\"BAD_REQUEST\", {\n          message: \"Teams are not enabled\"\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, option);\n      const user = await ctx.context.internalAdapter.findUserById(\n        ctx.body.userId\n      );\n      if (!user) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.USER_NOT_FOUND\n        });\n      }\n      const alreadyMember = await adapter.findMemberByEmail({\n        email: user.email,\n        organizationId: orgId\n      });\n      if (alreadyMember) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION\n        });\n      }\n      if (teamId) {\n        const team = await adapter.findTeamById({\n          teamId,\n          organizationId: orgId\n        });\n        if (!team || team.organizationId !== orgId) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n          });\n        }\n      }\n      const membershipLimit = ctx.context.orgOptions?.membershipLimit || 100;\n      const count = await adapter.countMembers({ organizationId: orgId });\n      if (count >= membershipLimit) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_MEMBERSHIP_LIMIT_REACHED\n        });\n      }\n      const {\n        role: _,\n        userId: __,\n        organizationId: ___,\n        ...additionalFields\n      } = ctx.body;\n      const organization = await adapter.findOrganizationById(orgId);\n      if (!organization) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      let memberData = {\n        organizationId: orgId,\n        userId: user.id,\n        role: parseRoles(ctx.body.role),\n        createdAt: /* @__PURE__ */ new Date(),\n        ...additionalFields ? additionalFields : {}\n      };\n      if (option?.organizationHooks?.beforeAddMember) {\n        const response = await option?.organizationHooks.beforeAddMember({\n          member: {\n            userId: user.id,\n            organizationId: orgId,\n            role: parseRoles(ctx.body.role),\n            ...additionalFields\n          },\n          user,\n          organization\n        });\n        if (response && typeof response === \"object\" && \"data\" in response) {\n          memberData = {\n            ...memberData,\n            ...response.data\n          };\n        }\n      }\n      const createdMember = await adapter.createMember(memberData);\n      if (teamId) {\n        await adapter.findOrCreateTeamMember({\n          userId: user.id,\n          teamId\n        });\n      }\n      if (option?.organizationHooks?.afterAddMember) {\n        await option?.organizationHooks.afterAddMember({\n          member: createdMember,\n          user,\n          organization\n        });\n      }\n      return ctx.json(createdMember);\n    }\n  );\n};\nconst removeMember = (options) => createAuthEndpoint(\n  \"/organization/remove-member\",\n  {\n    method: \"POST\",\n    body: z.object({\n      memberIdOrEmail: z.string().meta({\n        description: \"The ID or email of the member to remove\"\n      }),\n      /**\n       * If not provided, the active organization will be used\n       */\n      organizationId: z.string().meta({\n        description: 'The ID of the organization to remove the member from. If not provided, the active organization will be used. Eg: \"org-id\"'\n      }).optional()\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Remove a member from an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    member: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        userId: {\n                          type: \"string\"\n                        },\n                        organizationId: {\n                          type: \"string\"\n                        },\n                        role: {\n                          type: \"string\"\n                        }\n                      },\n                      required: [\"id\", \"userId\", \"organizationId\", \"role\"]\n                    }\n                  },\n                  required: [\"member\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    let toBeRemovedMember = null;\n    if (ctx.body.memberIdOrEmail.includes(\"@\")) {\n      toBeRemovedMember = await adapter.findMemberByEmail({\n        email: ctx.body.memberIdOrEmail,\n        organizationId\n      });\n    } else {\n      toBeRemovedMember = await adapter.findMemberById(\n        ctx.body.memberIdOrEmail\n      );\n    }\n    if (!toBeRemovedMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const roles = toBeRemovedMember.role.split(\",\");\n    const creatorRole = ctx.context.orgOptions?.creatorRole || \"owner\";\n    const isOwner = roles.includes(creatorRole);\n    if (isOwner) {\n      if (member.role !== creatorRole) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER\n        });\n      }\n      const { members } = await adapter.listMembers({\n        organizationId\n      });\n      const owners = members.filter((member2) => {\n        const roles2 = member2.role.split(\",\");\n        return roles2.includes(creatorRole);\n      });\n      if (owners.length <= 1) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER\n        });\n      }\n    }\n    const canDeleteMember = await hasPermission(\n      {\n        role: member.role,\n        options: ctx.context.orgOptions,\n        permissions: {\n          member: [\"delete\"]\n        },\n        organizationId\n      },\n      ctx\n    );\n    if (!canDeleteMember) {\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER\n      });\n    }\n    if (toBeRemovedMember?.organizationId !== organizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const organization = await adapter.findOrganizationById(organizationId);\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const userBeingRemoved = await ctx.context.internalAdapter.findUserById(\n      toBeRemovedMember.userId\n    );\n    if (!userBeingRemoved) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"User not found\"\n      });\n    }\n    if (options?.organizationHooks?.beforeRemoveMember) {\n      await options?.organizationHooks.beforeRemoveMember({\n        member: toBeRemovedMember,\n        user: userBeingRemoved,\n        organization\n      });\n    }\n    await adapter.deleteMember(toBeRemovedMember.id);\n    if (session.user.id === toBeRemovedMember.userId && session.session.activeOrganizationId === toBeRemovedMember.organizationId) {\n      await adapter.setActiveOrganization(session.session.token, null, ctx);\n    }\n    if (options?.organizationHooks?.afterRemoveMember) {\n      await options?.organizationHooks.afterRemoveMember({\n        member: toBeRemovedMember,\n        user: userBeingRemoved,\n        organization\n      });\n    }\n    return ctx.json({\n      member: toBeRemovedMember\n    });\n  }\n);\nconst updateMemberRole = (option) => createAuthEndpoint(\n  \"/organization/update-member-role\",\n  {\n    method: \"POST\",\n    body: z.object({\n      role: z.union([z.string(), z.array(z.string())]).meta({\n        description: 'The new role to be applied. This can be a string or array of strings representing the roles. Eg: [\"admin\", \"sale\"]'\n      }),\n      memberId: z.string().meta({\n        description: 'The member id to apply the role update to. Eg: \"member-id\"'\n      }),\n      organizationId: z.string().meta({\n        description: 'An optional organization ID which the member is a part of to apply the role update. If not provided, you must provide session headers to get the active organization. Eg: \"organization-id\"'\n      }).optional()\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Update the role of a member in an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    member: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        userId: {\n                          type: \"string\"\n                        },\n                        organizationId: {\n                          type: \"string\"\n                        },\n                        role: {\n                          type: \"string\"\n                        }\n                      },\n                      required: [\"id\", \"userId\", \"organizationId\", \"role\"]\n                    }\n                  },\n                  required: [\"member\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    if (!ctx.body.role) {\n      throw new APIError(\"BAD_REQUEST\");\n    }\n    const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const roleToSet = Array.isArray(ctx.body.role) ? ctx.body.role : ctx.body.role ? [ctx.body.role] : [];\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const toBeUpdatedMember = member.id !== ctx.body.memberId ? await adapter.findMemberById(ctx.body.memberId) : member;\n    if (!toBeUpdatedMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const memberBelongsToOrganization = toBeUpdatedMember.organizationId === organizationId;\n    if (!memberBelongsToOrganization) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER\n      });\n    }\n    const creatorRole = ctx.context.orgOptions?.creatorRole || \"owner\";\n    const updatingMemberRoles = member.role.split(\",\");\n    const toBeUpdatedMemberRoles = toBeUpdatedMember.role.split(\",\");\n    const isUpdatingCreator = toBeUpdatedMemberRoles.includes(creatorRole);\n    const updaterIsCreator = updatingMemberRoles.includes(creatorRole);\n    const isSettingCreatorRole = roleToSet.includes(creatorRole);\n    const memberIsUpdatingThemselves = member.id === toBeUpdatedMember.id;\n    if (isUpdatingCreator && !updaterIsCreator || isSettingCreatorRole && !updaterIsCreator) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER\n      });\n    }\n    if (updaterIsCreator && memberIsUpdatingThemselves) {\n      const members = await ctx.context.adapter.findMany({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      const owners = members.filter((member2) => {\n        const roles = member2.role.split(\",\");\n        return roles.includes(creatorRole);\n      });\n      if (owners.length <= 1 && !isSettingCreatorRole) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_WITHOUT_AN_OWNER\n        });\n      }\n    }\n    const canUpdateMember = await hasPermission(\n      {\n        role: member.role,\n        options: ctx.context.orgOptions,\n        permissions: {\n          member: [\"update\"]\n        },\n        allowCreatorAllPermissions: true,\n        organizationId\n      },\n      ctx\n    );\n    if (!canUpdateMember) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER\n      });\n    }\n    const organization = await adapter.findOrganizationById(organizationId);\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const userBeingUpdated = await ctx.context.internalAdapter.findUserById(\n      toBeUpdatedMember.userId\n    );\n    if (!userBeingUpdated) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"User not found\"\n      });\n    }\n    const previousRole = toBeUpdatedMember.role;\n    const newRole = parseRoles(ctx.body.role);\n    if (option?.organizationHooks?.beforeUpdateMemberRole) {\n      const response = await option?.organizationHooks.beforeUpdateMemberRole(\n        {\n          member: toBeUpdatedMember,\n          newRole,\n          user: userBeingUpdated,\n          organization\n        }\n      );\n      if (response && typeof response === \"object\" && \"data\" in response) {\n        const updatedMember2 = await adapter.updateMember(\n          ctx.body.memberId,\n          response.data.role || newRole\n        );\n        if (!updatedMember2) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n          });\n        }\n        if (option?.organizationHooks?.afterUpdateMemberRole) {\n          await option?.organizationHooks.afterUpdateMemberRole({\n            member: updatedMember2,\n            previousRole,\n            user: userBeingUpdated,\n            organization\n          });\n        }\n        return ctx.json(updatedMember2);\n      }\n    }\n    const updatedMember = await adapter.updateMember(\n      ctx.body.memberId,\n      newRole\n    );\n    if (!updatedMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    if (option?.organizationHooks?.afterUpdateMemberRole) {\n      await option?.organizationHooks.afterUpdateMemberRole({\n        member: updatedMember,\n        previousRole,\n        user: userBeingUpdated,\n        organization\n      });\n    }\n    return ctx.json(updatedMember);\n  }\n);\nconst getActiveMember = (options) => createAuthEndpoint(\n  \"/organization/get-active-member\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware, orgSessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Get the member details of the active organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    id: {\n                      type: \"string\"\n                    },\n                    userId: {\n                      type: \"string\"\n                    },\n                    organizationId: {\n                      type: \"string\"\n                    },\n                    role: {\n                      type: \"string\"\n                    }\n                  },\n                  required: [\"id\", \"userId\", \"organizationId\", \"role\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = session.session.activeOrganizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n        }\n      });\n    }\n    return ctx.json(member);\n  }\n);\nconst leaveOrganization = (options) => createAuthEndpoint(\n  \"/organization/leave\",\n  {\n    method: \"POST\",\n    body: z.object({\n      organizationId: z.string().meta({\n        description: 'The organization Id for the member to leave. Eg: \"organization-id\"'\n      })\n    }),\n    requireHeaders: true,\n    use: [sessionMiddleware, orgMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, options);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: ctx.body.organizationId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const creatorRole = ctx.context.orgOptions?.creatorRole || \"owner\";\n    const isOwnerLeaving = member.role.split(\",\").includes(creatorRole);\n    if (isOwnerLeaving) {\n      const members = await ctx.context.adapter.findMany({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: ctx.body.organizationId\n          }\n        ]\n      });\n      const owners = members.filter(\n        (member2) => member2.role.split(\",\").includes(creatorRole)\n      );\n      if (owners.length <= 1) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER\n        });\n      }\n    }\n    await adapter.deleteMember(member.id);\n    if (session.session.activeOrganizationId === ctx.body.organizationId) {\n      await adapter.setActiveOrganization(session.session.token, null, ctx);\n    }\n    return ctx.json(member);\n  }\n);\nconst listMembers = (options) => createAuthEndpoint(\n  \"/organization/list-members\",\n  {\n    method: \"GET\",\n    query: z.object({\n      limit: z.string().meta({\n        description: \"The number of users to return\"\n      }).or(z.number()).optional(),\n      offset: z.string().meta({\n        description: \"The offset to start from\"\n      }).or(z.number()).optional(),\n      sortBy: z.string().meta({\n        description: \"The field to sort by\"\n      }).optional(),\n      sortDirection: z.enum([\"asc\", \"desc\"]).meta({\n        description: \"The direction to sort by\"\n      }).optional(),\n      filterField: z.string().meta({\n        description: \"The field to filter by\"\n      }).optional(),\n      filterValue: z.string().meta({\n        description: \"The value to filter by\"\n      }).or(z.number()).or(z.boolean()).optional(),\n      filterOperator: z.enum([\"eq\", \"ne\", \"lt\", \"lte\", \"gt\", \"gte\", \"contains\"]).meta({\n        description: \"The operator to use for the filter\"\n      }).optional(),\n      organizationId: z.string().meta({\n        description: `The organization ID to list members for. If not provided, will default to the user's active organization. Eg: \"organization-id\"`\n      }).optional()\n    }).optional(),\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.query?.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const isMember = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!isMember) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION\n      });\n    }\n    const { members, total } = await adapter.listMembers({\n      organizationId,\n      limit: ctx.query?.limit ? Number(ctx.query.limit) : void 0,\n      offset: ctx.query?.offset ? Number(ctx.query.offset) : void 0,\n      sortBy: ctx.query?.sortBy,\n      sortOrder: ctx.query?.sortDirection,\n      filter: ctx.query?.filterField ? {\n        field: ctx.query?.filterField,\n        operator: ctx.query.filterOperator,\n        value: ctx.query.filterValue\n      } : void 0\n    });\n    return ctx.json({\n      members,\n      total\n    });\n  }\n);\nconst getActiveMemberRole = (options) => createAuthEndpoint(\n  \"/organization/get-active-member-role\",\n  {\n    method: \"GET\",\n    query: z.object({\n      userId: z.string().meta({\n        description: \"The user ID to get the role for. If not provided, will default to the current user's\"\n      }).optional(),\n      organizationId: z.string().meta({\n        description: `The organization ID to list members for. If not provided, will default to the user's active organization. Eg: \"organization-id\"`\n      }).optional()\n    }).optional(),\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.query?.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const userId = ctx.query?.userId || session.user.id;\n    const adapter = getOrgAdapter(ctx.context, options);\n    const member = await adapter.findMemberByOrgId({\n      userId,\n      organizationId\n    });\n    if (!member) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION\n      });\n    }\n    return ctx.json({\n      role: member?.role\n    });\n  }\n);\n\nconst createOrganization = (options) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: options?.schema?.organization?.additionalFields || {},\n    isClientSide: true\n  });\n  const baseSchema = z.object({\n    name: z.string().min(1).meta({\n      description: \"The name of the organization\"\n    }),\n    slug: z.string().min(1).meta({\n      description: \"The slug of the organization\"\n    }),\n    userId: z.coerce.string().meta({\n      description: 'The user id of the organization creator. If not provided, the current user will be used. Should only be used by admins or when called by the server. server-only. Eg: \"user-id\"'\n    }).optional(),\n    logo: z.string().meta({\n      description: \"The logo of the organization\"\n    }).optional(),\n    metadata: z.record(z.string(), z.any()).meta({\n      description: \"The metadata of the organization\"\n    }).optional(),\n    keepCurrentActiveOrganization: z.boolean().meta({\n      description: \"Whether to keep the current active organization active after creating a new one. Eg: true\"\n    }).optional()\n  });\n  return createAuthEndpoint(\n    \"/organization/create\",\n    {\n      method: \"POST\",\n      body: z.object({\n        ...baseSchema.shape,\n        ...additionalFieldsSchema.shape\n      }),\n      use: [orgMiddleware],\n      metadata: {\n        $Infer: {\n          body: {}\n        },\n        openapi: {\n          description: \"Create an organization\",\n          responses: {\n            \"200\": {\n              description: \"Success\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    description: \"The organization that was created\",\n                    $ref: \"#/components/schemas/Organization\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = await getSessionFromCtx(ctx);\n      if (!session && (ctx.request || ctx.headers)) {\n        throw new APIError(\"UNAUTHORIZED\");\n      }\n      let user = session?.user || null;\n      if (!user) {\n        if (!ctx.body.userId) {\n          throw new APIError(\"UNAUTHORIZED\");\n        }\n        user = await ctx.context.internalAdapter.findUserById(ctx.body.userId);\n      }\n      if (!user) {\n        return ctx.json(null, {\n          status: 401\n        });\n      }\n      const options2 = ctx.context.orgOptions;\n      const canCreateOrg = typeof options2?.allowUserToCreateOrganization === \"function\" ? await options2.allowUserToCreateOrganization(user) : options2?.allowUserToCreateOrganization === void 0 ? true : options2.allowUserToCreateOrganization;\n      if (!canCreateOrg) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, options2);\n      const userOrganizations = await adapter.listOrganizations(user.id);\n      const hasReachedOrgLimit = typeof options2.organizationLimit === \"number\" ? userOrganizations.length >= options2.organizationLimit : typeof options2.organizationLimit === \"function\" ? await options2.organizationLimit(user) : false;\n      if (hasReachedOrgLimit) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS\n        });\n      }\n      const existingOrganization = await adapter.findOrganizationBySlug(\n        ctx.body.slug\n      );\n      if (existingOrganization) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_ALREADY_EXISTS\n        });\n      }\n      let {\n        keepCurrentActiveOrganization: _,\n        userId: __,\n        ...orgData\n      } = ctx.body;\n      if (options2.organizationCreation?.beforeCreate) {\n        const response = await options2.organizationCreation.beforeCreate(\n          {\n            organization: {\n              ...orgData,\n              createdAt: /* @__PURE__ */ new Date()\n            },\n            user\n          },\n          ctx.request\n        );\n        if (response && typeof response === \"object\" && \"data\" in response) {\n          orgData = {\n            ...ctx.body,\n            ...response.data\n          };\n        }\n      }\n      if (options2?.organizationHooks?.beforeCreateOrganization) {\n        const response = await options2?.organizationHooks.beforeCreateOrganization({\n          organization: orgData,\n          user\n        });\n        if (response && typeof response === \"object\" && \"data\" in response) {\n          orgData = {\n            ...ctx.body,\n            ...response.data\n          };\n        }\n      }\n      const organization = await adapter.createOrganization({\n        organization: {\n          ...orgData,\n          createdAt: /* @__PURE__ */ new Date()\n        }\n      });\n      let member;\n      let teamMember = null;\n      let data = {\n        userId: user.id,\n        organizationId: organization.id,\n        role: ctx.context.orgOptions.creatorRole || \"owner\"\n      };\n      if (options2?.organizationHooks?.beforeAddMember) {\n        const response = await options2?.organizationHooks.beforeAddMember({\n          member: {\n            userId: user.id,\n            organizationId: organization.id,\n            role: ctx.context.orgOptions.creatorRole || \"owner\"\n          },\n          user,\n          organization\n        });\n        if (response && typeof response === \"object\" && \"data\" in response) {\n          data = {\n            ...data,\n            ...response.data\n          };\n        }\n      }\n      member = await adapter.createMember(data);\n      if (options2?.organizationHooks?.afterAddMember) {\n        await options2?.organizationHooks.afterAddMember({\n          member,\n          user,\n          organization\n        });\n      }\n      if (options2?.teams?.enabled && options2.teams.defaultTeam?.enabled !== false) {\n        let teamData = {\n          organizationId: organization.id,\n          name: `${organization.name}`,\n          createdAt: /* @__PURE__ */ new Date()\n        };\n        if (options2?.organizationHooks?.beforeCreateTeam) {\n          const response = await options2?.organizationHooks.beforeCreateTeam({\n            team: {\n              organizationId: organization.id,\n              name: `${organization.name}`\n            },\n            user,\n            organization\n          });\n          if (response && typeof response === \"object\" && \"data\" in response) {\n            teamData = {\n              ...teamData,\n              ...response.data\n            };\n          }\n        }\n        const defaultTeam = await options2.teams.defaultTeam?.customCreateDefaultTeam?.(\n          organization,\n          ctx.request\n        ) || await adapter.createTeam(teamData);\n        teamMember = await adapter.findOrCreateTeamMember({\n          teamId: defaultTeam.id,\n          userId: user.id\n        });\n        if (options2?.organizationHooks?.afterCreateTeam) {\n          await options2?.organizationHooks.afterCreateTeam({\n            team: defaultTeam,\n            user,\n            organization\n          });\n        }\n      }\n      if (options2.organizationCreation?.afterCreate) {\n        await options2.organizationCreation.afterCreate(\n          {\n            organization,\n            user,\n            member\n          },\n          ctx.request\n        );\n      }\n      if (options2?.organizationHooks?.afterCreateOrganization) {\n        await options2?.organizationHooks.afterCreateOrganization({\n          organization,\n          user,\n          member\n        });\n      }\n      if (ctx.context.session && !ctx.body.keepCurrentActiveOrganization) {\n        await adapter.setActiveOrganization(\n          ctx.context.session.session.token,\n          organization.id,\n          ctx\n        );\n      }\n      if (teamMember && ctx.context.session && !ctx.body.keepCurrentActiveOrganization) {\n        await adapter.setActiveTeam(\n          ctx.context.session.session.token,\n          teamMember.teamId,\n          ctx\n        );\n      }\n      return ctx.json({\n        ...organization,\n        metadata: organization.metadata && typeof organization.metadata === \"string\" ? JSON.parse(organization.metadata) : organization.metadata,\n        members: [member]\n      });\n    }\n  );\n};\nconst checkOrganizationSlug = (options) => createAuthEndpoint(\n  \"/organization/check-slug\",\n  {\n    method: \"POST\",\n    body: z.object({\n      slug: z.string().meta({\n        description: 'The organization slug to check. Eg: \"my-org\"'\n      })\n    }),\n    use: [requestOnlySessionMiddleware, orgMiddleware]\n  },\n  async (ctx) => {\n    const orgAdapter = getOrgAdapter(ctx.context, options);\n    const org = await orgAdapter.findOrganizationBySlug(ctx.body.slug);\n    if (!org) {\n      return ctx.json({\n        status: true\n      });\n    }\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"slug is taken\"\n    });\n  }\n);\nconst updateOrganization = (options) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: options?.schema?.organization?.additionalFields || {},\n    isClientSide: true\n  });\n  return createAuthEndpoint(\n    \"/organization/update\",\n    {\n      method: \"POST\",\n      body: z.object({\n        data: z.object({\n          ...additionalFieldsSchema.shape,\n          name: z.string().min(1).meta({\n            description: \"The name of the organization\"\n          }).optional(),\n          slug: z.string().min(1).meta({\n            description: \"The slug of the organization\"\n          }).optional(),\n          logo: z.string().meta({\n            description: \"The logo of the organization\"\n          }).optional(),\n          metadata: z.record(z.string(), z.any()).meta({\n            description: \"The metadata of the organization\"\n          }).optional()\n        }).partial(),\n        organizationId: z.string().meta({\n          description: 'The organization ID. Eg: \"org-id\"'\n        }).optional()\n      }),\n      requireHeaders: true,\n      use: [orgMiddleware],\n      metadata: {\n        $Infer: {\n          body: {}\n        },\n        openapi: {\n          description: \"Update an organization\",\n          responses: {\n            \"200\": {\n              description: \"Success\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    description: \"The updated organization\",\n                    $ref: \"#/components/schemas/Organization\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = await ctx.context.getSession(ctx);\n      if (!session) {\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: \"User not found\"\n        });\n      }\n      const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n      if (!organizationId) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, options);\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n        });\n      }\n      const canUpdateOrg = await hasPermission(\n        {\n          permissions: {\n            organization: [\"update\"]\n          },\n          role: member.role,\n          options: ctx.context.orgOptions,\n          organizationId\n        },\n        ctx\n      );\n      if (!canUpdateOrg) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION\n        });\n      }\n      if (options?.organizationHooks?.beforeUpdateOrganization) {\n        const response = await options.organizationHooks.beforeUpdateOrganization({\n          organization: ctx.body.data,\n          user: session.user,\n          member\n        });\n        if (response && typeof response === \"object\" && \"data\" in response) {\n          ctx.body.data = {\n            ...ctx.body.data,\n            ...response.data\n          };\n        }\n      }\n      const updatedOrg = await adapter.updateOrganization(\n        organizationId,\n        ctx.body.data\n      );\n      if (options?.organizationHooks?.afterUpdateOrganization) {\n        await options.organizationHooks.afterUpdateOrganization({\n          organization: updatedOrg,\n          user: session.user,\n          member\n        });\n      }\n      return ctx.json(updatedOrg);\n    }\n  );\n};\nconst deleteOrganization = (options) => {\n  return createAuthEndpoint(\n    \"/organization/delete\",\n    {\n      method: \"POST\",\n      body: z.object({\n        organizationId: z.string().meta({\n          description: \"The organization id to delete\"\n        })\n      }),\n      requireHeaders: true,\n      use: [orgMiddleware],\n      metadata: {\n        openapi: {\n          description: \"Delete an organization\",\n          responses: {\n            \"200\": {\n              description: \"Success\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"string\",\n                    description: \"The organization id that was deleted\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const disableOrganizationDeletion = ctx.context.orgOptions.organizationDeletion?.disabled || ctx.context.orgOptions.disableOrganizationDeletion;\n      if (disableOrganizationDeletion) {\n        if (ctx.context.orgOptions.organizationDeletion?.disabled) {\n          ctx.context.logger.info(\n            \"`organizationDeletion.disabled` is deprecated. Use `disableOrganizationDeletion` instead\"\n          );\n        }\n        throw new APIError(\"NOT_FOUND\", {\n          message: \"Organization deletion is disabled\"\n        });\n      }\n      const session = await ctx.context.getSession(ctx);\n      if (!session) {\n        throw new APIError(\"UNAUTHORIZED\", { status: 401 });\n      }\n      const organizationId = ctx.body.organizationId;\n      if (!organizationId) {\n        return ctx.json(null, {\n          status: 400,\n          body: {\n            message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n          }\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, options);\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n        });\n      }\n      const canDeleteOrg = await hasPermission(\n        {\n          role: member.role,\n          permissions: {\n            organization: [\"delete\"]\n          },\n          organizationId,\n          options: ctx.context.orgOptions\n        },\n        ctx\n      );\n      if (!canDeleteOrg) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION\n        });\n      }\n      if (organizationId === session.session.activeOrganizationId) {\n        await adapter.setActiveOrganization(session.session.token, null, ctx);\n      }\n      const org = await adapter.findOrganizationById(organizationId);\n      if (!org) {\n        throw new APIError(\"BAD_REQUEST\");\n      }\n      if (options?.organizationHooks?.beforeDeleteOrganization) {\n        await options.organizationHooks.beforeDeleteOrganization({\n          organization: org,\n          user: session.user\n        });\n      }\n      await adapter.deleteOrganization(organizationId);\n      if (options?.organizationHooks?.afterDeleteOrganization) {\n        await options.organizationHooks.afterDeleteOrganization({\n          organization: org,\n          user: session.user\n        });\n      }\n      return ctx.json(org);\n    }\n  );\n};\nconst getFullOrganization = (options) => createAuthEndpoint(\n  \"/organization/get-full-organization\",\n  {\n    method: \"GET\",\n    query: z.optional(\n      z.object({\n        organizationId: z.string().meta({\n          description: \"The organization id to get\"\n        }).optional(),\n        organizationSlug: z.string().meta({\n          description: \"The organization slug to get\"\n        }).optional(),\n        membersLimit: z.number().or(z.string().transform((val) => parseInt(val))).meta({\n          description: \"The limit of members to get. By default, it uses the membershipLimit option which defaults to 100.\"\n        }).optional()\n      })\n    ),\n    requireHeaders: true,\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Get the full organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  description: \"The organization\",\n                  $ref: \"#/components/schemas/Organization\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.query?.organizationSlug || ctx.query?.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      ctx.context.logger.info(\"No active organization found, returning null\");\n      return ctx.json(null, {\n        status: 200\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const organization = await adapter.findFullOrganization({\n      organizationId,\n      isSlug: !!ctx.query?.organizationSlug,\n      includeTeams: ctx.context.orgOptions.teams?.enabled,\n      membersLimit: ctx.query?.membersLimit\n    });\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const isMember = await adapter.checkMembership({\n      userId: session.user.id,\n      organizationId: organization.id\n    });\n    if (!isMember) {\n      await adapter.setActiveOrganization(session.session.token, null, ctx);\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    return ctx.json(organization);\n  }\n);\nconst setActiveOrganization = (options) => {\n  return createAuthEndpoint(\n    \"/organization/set-active\",\n    {\n      method: \"POST\",\n      body: z.object({\n        organizationId: z.string().meta({\n          description: 'The organization id to set as active. It can be null to unset the active organization. Eg: \"org-id\"'\n        }).nullable().optional(),\n        organizationSlug: z.string().meta({\n          description: 'The organization slug to set as active. It can be null to unset the active organization if organizationId is not provided. Eg: \"org-slug\"'\n        }).optional()\n      }),\n      use: [orgSessionMiddleware, orgMiddleware],\n      metadata: {\n        openapi: {\n          description: \"Set the active organization\",\n          responses: {\n            \"200\": {\n              description: \"Success\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    description: \"The organization\",\n                    $ref: \"#/components/schemas/Organization\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const adapter = getOrgAdapter(ctx.context, options);\n      const session = ctx.context.session;\n      let organizationId = ctx.body.organizationId;\n      let organizationSlug = ctx.body.organizationSlug;\n      if (organizationId === null) {\n        const sessionOrgId = session.session.activeOrganizationId;\n        if (!sessionOrgId) {\n          return ctx.json(null);\n        }\n        const updatedSession2 = await adapter.setActiveOrganization(\n          session.session.token,\n          null,\n          ctx\n        );\n        await setSessionCookie(ctx, {\n          session: updatedSession2,\n          user: session.user\n        });\n        return ctx.json(null);\n      }\n      if (!organizationId && !organizationSlug) {\n        const sessionOrgId = session.session.activeOrganizationId;\n        if (!sessionOrgId) {\n          return ctx.json(null);\n        }\n        organizationId = sessionOrgId;\n      }\n      if (organizationSlug && !organizationId) {\n        const organization2 = await adapter.findOrganizationBySlug(organizationSlug);\n        if (!organization2) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n          });\n        }\n        organizationId = organization2.id;\n      }\n      if (!organizationId) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      const isMember = await adapter.checkMembership({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!isMember) {\n        await adapter.setActiveOrganization(session.session.token, null, ctx);\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n        });\n      }\n      let organization = await adapter.findOrganizationById(organizationId);\n      if (!organization) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      const updatedSession = await adapter.setActiveOrganization(\n        session.session.token,\n        organization.id,\n        ctx\n      );\n      await setSessionCookie(ctx, {\n        session: updatedSession,\n        user: session.user\n      });\n      return ctx.json(organization);\n    }\n  );\n};\nconst listOrganizations = (options) => createAuthEndpoint(\n  \"/organization/list\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"List all organizations\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    $ref: \"#/components/schemas/Organization\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const adapter = getOrgAdapter(ctx.context, options);\n    const organizations = await adapter.listOrganizations(\n      ctx.context.session.user.id\n    );\n    return ctx.json(organizations);\n  }\n);\n\nconst createTeam = (options) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: options?.schema?.team?.additionalFields ?? {},\n    isClientSide: true\n  });\n  const baseSchema = z.object({\n    name: z.string().meta({\n      description: 'The name of the team. Eg: \"my-team\"'\n    }),\n    organizationId: z.string().meta({\n      description: 'The organization ID which the team will be created in. Defaults to the active organization. Eg: \"organization-id\"'\n    }).optional()\n  });\n  return createAuthEndpoint(\n    \"/organization/create-team\",\n    {\n      method: \"POST\",\n      body: z.object({\n        ...baseSchema.shape,\n        ...additionalFieldsSchema.shape\n      }),\n      use: [orgMiddleware],\n      metadata: {\n        $Infer: {\n          body: {}\n        },\n        openapi: {\n          description: \"Create a new team within an organization\",\n          responses: {\n            \"200\": {\n              description: \"Team created successfully\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"Unique identifier of the created team\"\n                      },\n                      name: {\n                        type: \"string\",\n                        description: \"Name of the team\"\n                      },\n                      organizationId: {\n                        type: \"string\",\n                        description: \"ID of the organization the team belongs to\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was created\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was last updated\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"name\",\n                      \"organizationId\",\n                      \"createdAt\",\n                      \"updatedAt\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = await getSessionFromCtx(ctx);\n      const organizationId = ctx.body.organizationId || session?.session.activeOrganizationId;\n      if (!session && (ctx.request || ctx.headers)) {\n        throw new APIError(\"UNAUTHORIZED\");\n      }\n      if (!organizationId) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, options);\n      if (session) {\n        const member = await adapter.findMemberByOrgId({\n          userId: session.user.id,\n          organizationId\n        });\n        if (!member) {\n          throw new APIError(\"FORBIDDEN\", {\n            message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION\n          });\n        }\n        const canCreate = await hasPermission(\n          {\n            role: member.role,\n            options: ctx.context.orgOptions,\n            permissions: {\n              team: [\"create\"]\n            },\n            organizationId\n          },\n          ctx\n        );\n        if (!canCreate) {\n          throw new APIError(\"FORBIDDEN\", {\n            message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_TEAMS_IN_THIS_ORGANIZATION\n          });\n        }\n      }\n      const existingTeams = await adapter.listTeams(organizationId);\n      const maximum = typeof ctx.context.orgOptions.teams?.maximumTeams === \"function\" ? await ctx.context.orgOptions.teams?.maximumTeams(\n        {\n          organizationId,\n          session\n        },\n        ctx.request\n      ) : ctx.context.orgOptions.teams?.maximumTeams;\n      const maxTeamsReached = maximum ? existingTeams.length >= maximum : false;\n      if (maxTeamsReached) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_TEAMS\n        });\n      }\n      const { name, organizationId: _, ...additionalFields } = ctx.body;\n      const organization = await adapter.findOrganizationById(organizationId);\n      if (!organization) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      let teamData = {\n        name,\n        organizationId,\n        createdAt: /* @__PURE__ */ new Date(),\n        updatedAt: /* @__PURE__ */ new Date(),\n        ...additionalFields\n      };\n      if (options?.organizationHooks?.beforeCreateTeam) {\n        const response = await options?.organizationHooks.beforeCreateTeam({\n          team: {\n            name,\n            organizationId,\n            ...additionalFields\n          },\n          user: session?.user,\n          organization\n        });\n        if (response && typeof response === \"object\" && \"data\" in response) {\n          teamData = {\n            ...teamData,\n            ...response.data\n          };\n        }\n      }\n      const createdTeam = await adapter.createTeam(teamData);\n      if (options?.organizationHooks?.afterCreateTeam) {\n        await options?.organizationHooks.afterCreateTeam({\n          team: createdTeam,\n          user: session?.user,\n          organization\n        });\n      }\n      return ctx.json(createdTeam);\n    }\n  );\n};\nconst removeTeam = (options) => createAuthEndpoint(\n  \"/organization/remove-team\",\n  {\n    method: \"POST\",\n    body: z.object({\n      teamId: z.string().meta({\n        description: `The team ID of the team to remove. Eg: \"team-id\"`\n      }),\n      organizationId: z.string().meta({\n        description: `The organization ID which the team falls under. If not provided, it will default to the user's active organization. Eg: \"organization-id\"`\n      }).optional()\n    }),\n    use: [orgMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Remove a team from an organization\",\n        responses: {\n          \"200\": {\n            description: \"Team removed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Confirmation message indicating successful removal\",\n                      enum: [\"Team removed successfully.\"]\n                    }\n                  },\n                  required: [\"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    const organizationId = ctx.body.organizationId || session?.session.activeOrganizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    if (!session && (ctx.request || ctx.headers)) {\n      throw new APIError(\"UNAUTHORIZED\");\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    if (session) {\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member || session.session?.activeTeamId === ctx.body.teamId) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_TEAM\n        });\n      }\n      const canRemove = await hasPermission(\n        {\n          role: member.role,\n          options: ctx.context.orgOptions,\n          permissions: {\n            team: [\"delete\"]\n          },\n          organizationId\n        },\n        ctx\n      );\n      if (!canRemove) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_TEAMS_IN_THIS_ORGANIZATION\n        });\n      }\n    }\n    const team = await adapter.findTeamById({\n      teamId: ctx.body.teamId,\n      organizationId\n    });\n    if (!team || team.organizationId !== organizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n      });\n    }\n    if (!ctx.context.orgOptions.teams?.allowRemovingAllTeams) {\n      const teams = await adapter.listTeams(organizationId);\n      if (teams.length <= 1) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.UNABLE_TO_REMOVE_LAST_TEAM\n        });\n      }\n    }\n    const organization = await adapter.findOrganizationById(organizationId);\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    if (options?.organizationHooks?.beforeDeleteTeam) {\n      await options?.organizationHooks.beforeDeleteTeam({\n        team,\n        user: session?.user,\n        organization\n      });\n    }\n    await adapter.deleteTeam(team.id);\n    if (options?.organizationHooks?.afterDeleteTeam) {\n      await options?.organizationHooks.afterDeleteTeam({\n        team,\n        user: session?.user,\n        organization\n      });\n    }\n    return ctx.json({ message: \"Team removed successfully.\" });\n  }\n);\nconst updateTeam = (options) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: options?.schema?.team?.additionalFields ?? {},\n    isClientSide: true\n  });\n  return createAuthEndpoint(\n    \"/organization/update-team\",\n    {\n      method: \"POST\",\n      body: z.object({\n        teamId: z.string().meta({\n          description: `The ID of the team to be updated. Eg: \"team-id\"`\n        }),\n        data: z.object({\n          ...teamSchema.shape,\n          ...additionalFieldsSchema.shape\n        }).partial()\n      }),\n      requireHeaders: true,\n      use: [orgMiddleware, orgSessionMiddleware],\n      metadata: {\n        $Infer: { body: {} },\n        openapi: {\n          description: \"Update an existing team in an organization\",\n          responses: {\n            \"200\": {\n              description: \"Team updated successfully\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"Unique identifier of the updated team\"\n                      },\n                      name: {\n                        type: \"string\",\n                        description: \"Updated name of the team\"\n                      },\n                      organizationId: {\n                        type: \"string\",\n                        description: \"ID of the organization the team belongs to\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was created\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was last updated\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"name\",\n                      \"organizationId\",\n                      \"createdAt\",\n                      \"updatedAt\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = ctx.context.session;\n      const organizationId = ctx.body.data.organizationId || session.session.activeOrganizationId;\n      if (!organizationId) {\n        return ctx.json(null, {\n          status: 400,\n          body: {\n            message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n          }\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, options);\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM\n        });\n      }\n      const canUpdate = await hasPermission(\n        {\n          role: member.role,\n          options: ctx.context.orgOptions,\n          permissions: {\n            team: [\"update\"]\n          },\n          organizationId\n        },\n        ctx\n      );\n      if (!canUpdate) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM\n        });\n      }\n      const team = await adapter.findTeamById({\n        teamId: ctx.body.teamId,\n        organizationId\n      });\n      if (!team || team.organizationId !== organizationId) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n        });\n      }\n      const { name, organizationId: __, ...additionalFields } = ctx.body.data;\n      const organization = await adapter.findOrganizationById(organizationId);\n      if (!organization) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      const updates = {\n        name,\n        ...additionalFields\n      };\n      if (options?.organizationHooks?.beforeUpdateTeam) {\n        const response = await options?.organizationHooks.beforeUpdateTeam({\n          team,\n          updates,\n          user: session.user,\n          organization\n        });\n        if (response && typeof response === \"object\" && \"data\" in response) {\n          const modifiedUpdates = response.data;\n          const updatedTeam2 = await adapter.updateTeam(\n            team.id,\n            modifiedUpdates\n          );\n          if (options?.organizationHooks?.afterUpdateTeam) {\n            await options?.organizationHooks.afterUpdateTeam({\n              team: updatedTeam2,\n              user: session.user,\n              organization\n            });\n          }\n          return ctx.json(updatedTeam2);\n        }\n      }\n      const updatedTeam = await adapter.updateTeam(team.id, updates);\n      if (options?.organizationHooks?.afterUpdateTeam) {\n        await options?.organizationHooks.afterUpdateTeam({\n          team: updatedTeam,\n          user: session.user,\n          organization\n        });\n      }\n      return ctx.json(updatedTeam);\n    }\n  );\n};\nconst listOrganizationTeams = (options) => createAuthEndpoint(\n  \"/organization/list-teams\",\n  {\n    method: \"GET\",\n    query: z.optional(\n      z.object({\n        organizationId: z.string().meta({\n          description: `The organization ID which the teams are under to list. Defaults to the users active organization. Eg: \"organziation-id\"`\n        }).optional()\n      })\n    ),\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"List all teams in an organization\",\n        responses: {\n          \"200\": {\n            description: \"Teams retrieved successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"Unique identifier of the team\"\n                      },\n                      name: {\n                        type: \"string\",\n                        description: \"Name of the team\"\n                      },\n                      organizationId: {\n                        type: \"string\",\n                        description: \"ID of the organization the team belongs to\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was created\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was last updated\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"name\",\n                      \"organizationId\",\n                      \"createdAt\",\n                      \"updatedAt\"\n                    ]\n                  },\n                  description: \"Array of team objects within the organization\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.query?.organizationId || session?.session.activeOrganizationId;\n    if (!organizationId) {\n      throw ctx.error(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: organizationId || \"\"\n    });\n    if (!member) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_ACCESS_THIS_ORGANIZATION\n      });\n    }\n    const teams = await adapter.listTeams(organizationId);\n    return ctx.json(teams);\n  }\n);\nconst setActiveTeam = (options) => createAuthEndpoint(\n  \"/organization/set-active-team\",\n  {\n    method: \"POST\",\n    body: z.object({\n      teamId: z.string().meta({\n        description: \"The team id to set as active. It can be null to unset the active team\"\n      }).nullable().optional()\n    }),\n    use: [orgSessionMiddleware, orgMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Set the active team\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  description: \"The team\",\n                  $ref: \"#/components/schemas/Team\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const session = ctx.context.session;\n    if (ctx.body.teamId === null) {\n      const sessionTeamId = session.session.activeTeamId;\n      if (!sessionTeamId) {\n        return ctx.json(null);\n      }\n      const updatedSession2 = await adapter.setActiveTeam(\n        session.session.token,\n        null,\n        ctx\n      );\n      await setSessionCookie(ctx, {\n        session: updatedSession2,\n        user: session.user\n      });\n      return ctx.json(null);\n    }\n    let teamId;\n    if (!ctx.body.teamId) {\n      const sessionTeamId = session.session.activeTeamId;\n      if (!sessionTeamId) {\n        return ctx.json(null);\n      } else {\n        teamId = sessionTeamId;\n      }\n    } else {\n      teamId = ctx.body.teamId;\n    }\n    const team = await adapter.findTeamById({ teamId });\n    if (!team) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n      });\n    }\n    const member = await adapter.findTeamMember({\n      teamId,\n      userId: session.user.id\n    });\n    if (!member) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_TEAM\n      });\n    }\n    const updatedSession = await adapter.setActiveTeam(\n      session.session.token,\n      team.id,\n      ctx\n    );\n    await setSessionCookie(ctx, {\n      session: updatedSession,\n      user: session.user\n    });\n    return ctx.json(team);\n  }\n);\nconst listUserTeams = (options) => createAuthEndpoint(\n  \"/organization/list-user-teams\",\n  {\n    method: \"GET\",\n    metadata: {\n      openapi: {\n        description: \"List all teams that the current user is a part of.\",\n        responses: {\n          \"200\": {\n            description: \"Teams retrieved successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    description: \"The team\",\n                    $ref: \"#/components/schemas/Team\"\n                  },\n                  description: \"Array of team objects within the organization\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const teams = await adapter.listTeamsByUser({\n      userId: session.user.id\n    });\n    return ctx.json(teams);\n  }\n);\nconst listTeamMembers = (options) => createAuthEndpoint(\n  \"/organization/list-team-members\",\n  {\n    method: \"GET\",\n    query: z.optional(\n      z.object({\n        teamId: z.string().optional().meta({\n          description: \"The team whose members we should return. If this is not provided the members of the current active team get returned.\"\n        })\n      })\n    ),\n    metadata: {\n      openapi: {\n        description: \"List the members of the given team.\",\n        responses: {\n          \"200\": {\n            description: \"Teams retrieved successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    description: \"The team member\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"Unique identifier of the team member\"\n                      },\n                      userId: {\n                        type: \"string\",\n                        description: \"The user ID of the team member\"\n                      },\n                      teamId: {\n                        type: \"string\",\n                        description: \"The team ID of the team the team member is in\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team member was created\"\n                      }\n                    },\n                    required: [\"id\", \"userId\", \"teamId\", \"createdAt\"]\n                  },\n                  description: \"Array of team member objects within the team\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    let teamId = ctx.query?.teamId || session?.session.activeTeamId;\n    if (!teamId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_DO_NOT_HAVE_AN_ACTIVE_TEAM\n      });\n    }\n    const member = await adapter.findTeamMember({\n      userId: session.user.id,\n      teamId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_TEAM\n      });\n    }\n    const members = await adapter.listTeamMembers({\n      teamId\n    });\n    return ctx.json(members);\n  }\n);\nconst addTeamMember = (options) => createAuthEndpoint(\n  \"/organization/add-team-member\",\n  {\n    method: \"POST\",\n    body: z.object({\n      teamId: z.string().meta({\n        description: \"The team the user should be a member of.\"\n      }),\n      userId: z.coerce.string().meta({\n        description: \"The user Id which represents the user to be added as a member.\"\n      })\n    }),\n    metadata: {\n      openapi: {\n        description: \"The newly created member\",\n        responses: {\n          \"200\": {\n            description: \"Team member created successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  description: \"The team member\",\n                  properties: {\n                    id: {\n                      type: \"string\",\n                      description: \"Unique identifier of the team member\"\n                    },\n                    userId: {\n                      type: \"string\",\n                      description: \"The user ID of the team member\"\n                    },\n                    teamId: {\n                      type: \"string\",\n                      description: \"The team ID of the team the team member is in\"\n                    },\n                    createdAt: {\n                      type: \"string\",\n                      format: \"date-time\",\n                      description: \"Timestamp when the team member was created\"\n                    }\n                  },\n                  required: [\"id\", \"userId\", \"teamId\", \"createdAt\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    if (!session.session.activeOrganizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const currentMember = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: session.session.activeOrganizationId\n    });\n    if (!currentMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    const canUpdateMember = await hasPermission(\n      {\n        role: currentMember.role,\n        options: ctx.context.orgOptions,\n        permissions: {\n          member: [\"update\"]\n        },\n        organizationId: session.session.activeOrganizationId\n      },\n      ctx\n    );\n    if (!canUpdateMember) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_TEAM_MEMBER\n      });\n    }\n    const toBeAddedMember = await adapter.findMemberByOrgId({\n      userId: ctx.body.userId,\n      organizationId: session.session.activeOrganizationId\n    });\n    if (!toBeAddedMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    const team = await adapter.findTeamById({\n      teamId: ctx.body.teamId,\n      organizationId: session.session.activeOrganizationId\n    });\n    if (!team) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n      });\n    }\n    const organization = await adapter.findOrganizationById(\n      session.session.activeOrganizationId\n    );\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const userBeingAdded = await ctx.context.internalAdapter.findUserById(\n      ctx.body.userId\n    );\n    if (!userBeingAdded) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"User not found\"\n      });\n    }\n    if (options?.organizationHooks?.beforeAddTeamMember) {\n      await options?.organizationHooks.beforeAddTeamMember({\n        teamMember: {\n          teamId: ctx.body.teamId,\n          userId: ctx.body.userId\n        },\n        team,\n        user: userBeingAdded,\n        organization\n      });\n    }\n    const teamMember = await adapter.findOrCreateTeamMember({\n      teamId: ctx.body.teamId,\n      userId: ctx.body.userId\n    });\n    if (options?.organizationHooks?.afterAddTeamMember) {\n      await options?.organizationHooks.afterAddTeamMember({\n        teamMember,\n        team,\n        user: userBeingAdded,\n        organization\n      });\n    }\n    return ctx.json(teamMember);\n  }\n);\nconst removeTeamMember = (options) => createAuthEndpoint(\n  \"/organization/remove-team-member\",\n  {\n    method: \"POST\",\n    body: z.object({\n      teamId: z.string().meta({\n        description: \"The team the user should be removed from.\"\n      }),\n      userId: z.coerce.string().meta({\n        description: \"The user which should be removed from the team.\"\n      })\n    }),\n    metadata: {\n      openapi: {\n        description: \"Remove a member from a team\",\n        responses: {\n          \"200\": {\n            description: \"Team member removed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Confirmation message indicating successful removal\",\n                      enum: [\"Team member removed successfully.\"]\n                    }\n                  },\n                  required: [\"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    if (!session.session.activeOrganizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const currentMember = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: session.session.activeOrganizationId\n    });\n    if (!currentMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    const canDeleteMember = await hasPermission(\n      {\n        role: currentMember.role,\n        options: ctx.context.orgOptions,\n        permissions: {\n          member: [\"delete\"]\n        },\n        organizationId: session.session.activeOrganizationId\n      },\n      ctx\n    );\n    if (!canDeleteMember) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_REMOVE_A_TEAM_MEMBER\n      });\n    }\n    const toBeAddedMember = await adapter.findMemberByOrgId({\n      userId: ctx.body.userId,\n      organizationId: session.session.activeOrganizationId\n    });\n    if (!toBeAddedMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    const team = await adapter.findTeamById({\n      teamId: ctx.body.teamId,\n      organizationId: session.session.activeOrganizationId\n    });\n    if (!team) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n      });\n    }\n    const organization = await adapter.findOrganizationById(\n      session.session.activeOrganizationId\n    );\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const userBeingRemoved = await ctx.context.internalAdapter.findUserById(\n      ctx.body.userId\n    );\n    if (!userBeingRemoved) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"User not found\"\n      });\n    }\n    const teamMember = await adapter.findTeamMember({\n      teamId: ctx.body.teamId,\n      userId: ctx.body.userId\n    });\n    if (!teamMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_TEAM\n      });\n    }\n    if (options?.organizationHooks?.beforeRemoveTeamMember) {\n      await options?.organizationHooks.beforeRemoveTeamMember({\n        teamMember,\n        team,\n        user: userBeingRemoved,\n        organization\n      });\n    }\n    await adapter.removeTeamMember({\n      teamId: ctx.body.teamId,\n      userId: ctx.body.userId\n    });\n    if (options?.organizationHooks?.afterRemoveTeamMember) {\n      await options?.organizationHooks.afterRemoveTeamMember({\n        teamMember,\n        team,\n        user: userBeingRemoved,\n        organization\n      });\n    }\n    return ctx.json({ message: \"Team member removed successfully.\" });\n  }\n);\n\nconst normalizeRoleName = (role) => role.toLowerCase();\nconst DEFAULT_MAXIMUM_ROLES_PER_ORGANIZATION = Number.POSITIVE_INFINITY;\nconst getAdditionalFields = (options, shouldBePartial = false) => {\n  let additionalFields = options?.schema?.organizationRole?.additionalFields || {};\n  if (shouldBePartial) {\n    for (const key in additionalFields) {\n      additionalFields[key].required = false;\n    }\n  }\n  const additionalFieldsSchema = toZodSchema({\n    fields: additionalFields,\n    isClientSide: true\n  });\n  return {\n    additionalFieldsSchema,\n    $AdditionalFields: {},\n    $ReturnAdditionalFields: {}\n  };\n};\nconst createOrgRole = (options) => {\n  const { additionalFieldsSchema} = getAdditionalFields(options, false);\n  return createAuthEndpoint(\n    \"/organization/create-role\",\n    {\n      method: \"POST\",\n      body: z.object({\n        organizationId: z.string().optional().meta({\n          description: \"The id of the organization to create the role in. If not provided, the user's active organization will be used.\"\n        }),\n        role: z.string().meta({\n          description: \"The name of the role to create\"\n        }),\n        permission: z.record(z.string(), z.array(z.string())).meta({\n          description: \"The permission to assign to the role\"\n        }),\n        additionalFields: z.object({ ...additionalFieldsSchema.shape }).optional()\n      }),\n      metadata: {\n        $Infer: {\n          body: {}\n        }\n      },\n      requireHeaders: true,\n      use: [orgSessionMiddleware]\n    },\n    async (ctx) => {\n      const { session, user } = ctx.context.session;\n      let roleName = ctx.body.role;\n      const permission = ctx.body.permission;\n      const additionalFields = ctx.body.additionalFields;\n      const ac = options.ac;\n      if (!ac) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The organization plugin is missing a pre-defined ac instance.`,\n          `\nPlease refer to the documentation here: https://better-auth.com/docs/plugins/organization#dynamic-access-control`\n        );\n        throw new APIError(\"NOT_IMPLEMENTED\", {\n          message: ORGANIZATION_ERROR_CODES.MISSING_AC_INSTANCE\n        });\n      }\n      const organizationId = ctx.body.organizationId ?? session.activeOrganizationId;\n      if (!organizationId) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The session is missing an active organization id to create a role. Either set an active org id, or pass an organizationId in the request body.`\n        );\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_MUST_BE_IN_AN_ORGANIZATION_TO_CREATE_A_ROLE\n        });\n      }\n      roleName = normalizeRoleName(roleName);\n      await checkIfRoleNameIsTakenByPreDefinedRole({\n        role: roleName,\n        organizationId,\n        options,\n        ctx\n      });\n      const member = await ctx.context.adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          },\n          {\n            field: \"userId\",\n            value: user.id,\n            operator: \"eq\",\n            connector: \"AND\"\n          }\n        ]\n      });\n      if (!member) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The user is not a member of the organization to create a role.`,\n          {\n            userId: user.id,\n            organizationId\n          }\n        );\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION\n        });\n      }\n      const canCreateRole = await hasPermission(\n        {\n          options,\n          organizationId,\n          permissions: {\n            ac: [\"create\"]\n          },\n          role: member.role\n        },\n        ctx\n      );\n      if (!canCreateRole) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The user is not permitted to create a role. If this is unexpected, please make sure the role associated to that member has the \"ac\" resource with the \"create\" permission.`,\n          {\n            userId: user.id,\n            organizationId,\n            role: member.role\n          }\n        );\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_A_ROLE\n        });\n      }\n      const maximumRolesPerOrganization = typeof options.dynamicAccessControl?.maximumRolesPerOrganization === \"function\" ? await options.dynamicAccessControl.maximumRolesPerOrganization(\n        organizationId\n      ) : options.dynamicAccessControl?.maximumRolesPerOrganization ?? DEFAULT_MAXIMUM_ROLES_PER_ORGANIZATION;\n      const rolesInDB = await ctx.context.adapter.count({\n        model: \"organizationRole\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          }\n        ]\n      });\n      if (rolesInDB >= maximumRolesPerOrganization) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] Failed to create a new role, the organization has too many roles. Maximum allowed roles is ${maximumRolesPerOrganization}.`,\n          {\n            organizationId,\n            maximumRolesPerOrganization,\n            rolesInDB\n          }\n        );\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.TOO_MANY_ROLES\n        });\n      }\n      await checkForInvalidResources({ ac, ctx, permission });\n      await checkIfMemberHasPermission({\n        ctx,\n        member,\n        options,\n        organizationId,\n        permissionRequired: permission,\n        user,\n        action: \"create\"\n      });\n      await checkIfRoleNameIsTakenByRoleInDB({\n        ctx,\n        organizationId,\n        role: roleName\n      });\n      const newRole = ac.newRole(permission);\n      const newRoleInDB = await ctx.context.adapter.create({\n        model: \"organizationRole\",\n        data: {\n          createdAt: /* @__PURE__ */ new Date(),\n          organizationId,\n          permission: JSON.stringify(permission),\n          role: roleName,\n          ...additionalFields\n        }\n      });\n      const data = {\n        ...newRoleInDB,\n        permission\n      };\n      return ctx.json({\n        success: true,\n        roleData: data,\n        statements: newRole.statements\n      });\n    }\n  );\n};\nconst deleteOrgRole = (options) => {\n  return createAuthEndpoint(\n    \"/organization/delete-role\",\n    {\n      method: \"POST\",\n      body: z.object({\n        organizationId: z.string().optional().meta({\n          description: \"The id of the organization to create the role in. If not provided, the user's active organization will be used.\"\n        })\n      }).and(\n        z.union([\n          z.object({\n            roleName: z.string().meta({\n              description: \"The name of the role to delete\"\n            })\n          }),\n          z.object({\n            roleId: z.string().meta({\n              description: \"The id of the role to delete\"\n            })\n          })\n        ])\n      ),\n      requireHeaders: true,\n      use: [orgSessionMiddleware],\n      metadata: {\n        $Infer: {\n          body: {}\n        }\n      }\n    },\n    async (ctx) => {\n      const { session, user } = ctx.context.session;\n      const organizationId = ctx.body.organizationId ?? session.activeOrganizationId;\n      if (!organizationId) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The session is missing an active organization id to delete a role. Either set an active org id, or pass an organizationId in the request body.`\n        );\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        });\n      }\n      const member = await ctx.context.adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          },\n          {\n            field: \"userId\",\n            value: user.id,\n            operator: \"eq\",\n            connector: \"AND\"\n          }\n        ]\n      });\n      if (!member) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The user is not a member of the organization to delete a role.`,\n          {\n            userId: user.id,\n            organizationId\n          }\n        );\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION\n        });\n      }\n      const canDeleteRole = await hasPermission(\n        {\n          options,\n          organizationId,\n          permissions: {\n            ac: [\"delete\"]\n          },\n          role: member.role\n        },\n        ctx\n      );\n      if (!canDeleteRole) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The user is not permitted to delete a role. If this is unexpected, please make sure the role associated to that member has the \"ac\" resource with the \"delete\" permission.`,\n          {\n            userId: user.id,\n            organizationId,\n            role: member.role\n          }\n        );\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_A_ROLE\n        });\n      }\n      if (\"roleName\" in ctx.body) {\n        const roleName = ctx.body.roleName;\n        const defaultRoles = options.roles ? Object.keys(options.roles) : [\"owner\", \"admin\", \"member\"];\n        if (defaultRoles.includes(roleName)) {\n          ctx.context.logger.error(\n            `[Dynamic Access Control] Cannot delete a pre-defined role.`,\n            {\n              roleName,\n              organizationId,\n              defaultRoles\n            }\n          );\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ORGANIZATION_ERROR_CODES.CANNOT_DELETE_A_PRE_DEFINED_ROLE\n          });\n        }\n      }\n      let condition;\n      if (\"roleName\" in ctx.body) {\n        condition = {\n          field: \"role\",\n          value: ctx.body.roleName,\n          operator: \"eq\",\n          connector: \"AND\"\n        };\n      } else {\n        condition = {\n          field: \"id\",\n          value: ctx.body.roleId,\n          operator: \"eq\",\n          connector: \"AND\"\n        };\n      }\n      const existingRoleInDB = await ctx.context.adapter.findOne({\n        model: \"organizationRole\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          },\n          condition\n        ]\n      });\n      if (!existingRoleInDB) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The role name/id does not exist in the database.`,\n          {\n            ...\"roleName\" in ctx.body ? { roleName: ctx.body.roleName } : { roleId: ctx.body.roleId },\n            organizationId\n          }\n        );\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ROLE_NOT_FOUND\n        });\n      }\n      existingRoleInDB.permission = JSON.parse(\n        existingRoleInDB.permission\n      );\n      await ctx.context.adapter.delete({\n        model: \"organizationRole\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          },\n          condition\n        ]\n      });\n      return ctx.json({\n        success: true\n      });\n    }\n  );\n};\nconst listOrgRoles = (options) => {\n  getAdditionalFields(options, false);\n  return createAuthEndpoint(\n    \"/organization/list-roles\",\n    {\n      method: \"GET\",\n      use: [orgSessionMiddleware],\n      query: z.object({\n        organizationId: z.string().optional().meta({\n          description: \"The id of the organization to list roles for. If not provided, the user's active organization will be used.\"\n        })\n      }).optional(),\n      metadata: {\n        $Infer: {\n          query: {}\n        }\n      }\n    },\n    async (ctx) => {\n      const { session, user } = ctx.context.session;\n      const organizationId = ctx.query?.organizationId ?? session.activeOrganizationId;\n      if (!organizationId) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The session is missing an active organization id to list roles. Either set an active org id, or pass an organizationId in the request query.`\n        );\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        });\n      }\n      const member = await ctx.context.adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          },\n          {\n            field: \"userId\",\n            value: user.id,\n            operator: \"eq\",\n            connector: \"AND\"\n          }\n        ]\n      });\n      if (!member) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The user is not a member of the organization to list roles.`,\n          {\n            userId: user.id,\n            organizationId\n          }\n        );\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION\n        });\n      }\n      const canListRoles = await hasPermission(\n        {\n          options,\n          organizationId,\n          permissions: {\n            ac: [\"read\"]\n          },\n          role: member.role\n        },\n        ctx\n      );\n      if (!canListRoles) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The user is not permitted to list roles.`,\n          {\n            userId: user.id,\n            organizationId,\n            role: member.role\n          }\n        );\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_LIST_A_ROLE\n        });\n      }\n      let roles = await ctx.context.adapter.findMany({\n        model: \"organizationRole\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          }\n        ]\n      });\n      roles = roles.map((x) => ({\n        ...x,\n        permission: JSON.parse(x.permission)\n      }));\n      return ctx.json(roles);\n    }\n  );\n};\nconst getOrgRole = (options) => {\n  getAdditionalFields(options, false);\n  return createAuthEndpoint(\n    \"/organization/get-role\",\n    {\n      method: \"GET\",\n      use: [orgSessionMiddleware],\n      query: z.object({\n        organizationId: z.string().optional().meta({\n          description: \"The id of the organization to read a role for. If not provided, the user's active organization will be used.\"\n        })\n      }).and(\n        z.union([\n          z.object({\n            roleName: z.string().meta({\n              description: \"The name of the role to read\"\n            })\n          }),\n          z.object({\n            roleId: z.string().meta({\n              description: \"The id of the role to read\"\n            })\n          })\n        ])\n      ).optional(),\n      metadata: {\n        $Infer: {\n          query: {}\n        }\n      }\n    },\n    async (ctx) => {\n      const { session, user } = ctx.context.session;\n      const organizationId = ctx.query?.organizationId ?? session.activeOrganizationId;\n      if (!organizationId) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The session is missing an active organization id to read a role. Either set an active org id, or pass an organizationId in the request query.`\n        );\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        });\n      }\n      const member = await ctx.context.adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          },\n          {\n            field: \"userId\",\n            value: user.id,\n            operator: \"eq\",\n            connector: \"AND\"\n          }\n        ]\n      });\n      if (!member) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The user is not a member of the organization to read a role.`,\n          {\n            userId: user.id,\n            organizationId\n          }\n        );\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION\n        });\n      }\n      const canListRoles = await hasPermission(\n        {\n          options,\n          organizationId,\n          permissions: {\n            ac: [\"read\"]\n          },\n          role: member.role\n        },\n        ctx\n      );\n      if (!canListRoles) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The user is not permitted to read a role.`,\n          {\n            userId: user.id,\n            organizationId,\n            role: member.role\n          }\n        );\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_READ_A_ROLE\n        });\n      }\n      let condition;\n      if (\"roleName\" in ctx.query) {\n        condition = {\n          field: \"role\",\n          value: ctx.query.roleName,\n          operator: \"eq\",\n          connector: \"AND\"\n        };\n      } else {\n        condition = {\n          field: \"id\",\n          value: ctx.query.roleId,\n          operator: \"eq\",\n          connector: \"AND\"\n        };\n      }\n      let role = await ctx.context.adapter.findOne({\n        model: \"organizationRole\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          },\n          condition\n        ]\n      });\n      if (!role) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The role name/id does not exist in the database.`,\n          {\n            ...\"roleName\" in ctx.query ? { roleName: ctx.query.roleName } : { roleId: ctx.query.roleId },\n            organizationId\n          }\n        );\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ROLE_NOT_FOUND\n        });\n      }\n      role.permission = JSON.parse(role.permission);\n      return ctx.json(role);\n    }\n  );\n};\nconst updateOrgRole = (options) => {\n  const { additionalFieldsSchema} = getAdditionalFields(options, true);\n  return createAuthEndpoint(\n    \"/organization/update-role\",\n    {\n      method: \"POST\",\n      body: z.object({\n        organizationId: z.string().optional().meta({\n          description: \"The id of the organization to update the role in. If not provided, the user's active organization will be used.\"\n        }),\n        data: z.object({\n          permission: z.record(z.string(), z.array(z.string())).optional().meta({\n            description: \"The permission to update the role with\"\n          }),\n          roleName: z.string().optional().meta({\n            description: \"The name of the role to update\"\n          }),\n          ...additionalFieldsSchema.shape\n        })\n      }).and(\n        z.union([\n          z.object({\n            roleName: z.string().meta({\n              description: \"The name of the role to update\"\n            })\n          }),\n          z.object({\n            roleId: z.string().meta({\n              description: \"The id of the role to update\"\n            })\n          })\n        ])\n      ),\n      metadata: {\n        $Infer: {\n          body: {}\n        }\n      },\n      use: [orgSessionMiddleware]\n    },\n    async (ctx) => {\n      const { session, user } = ctx.context.session;\n      const ac = options.ac;\n      if (!ac) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The organization plugin is missing a pre-defined ac instance.`,\n          `\nPlease refer to the documentation here: https://better-auth.com/docs/plugins/organization#dynamic-access-control`\n        );\n        throw new APIError(\"NOT_IMPLEMENTED\", {\n          message: ORGANIZATION_ERROR_CODES.MISSING_AC_INSTANCE\n        });\n      }\n      const organizationId = ctx.body.organizationId ?? session.activeOrganizationId;\n      if (!organizationId) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The session is missing an active organization id to update a role. Either set an active org id, or pass an organizationId in the request body.`\n        );\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        });\n      }\n      const member = await ctx.context.adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          },\n          {\n            field: \"userId\",\n            value: user.id,\n            operator: \"eq\",\n            connector: \"AND\"\n          }\n        ]\n      });\n      if (!member) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The user is not a member of the organization to update a role.`,\n          {\n            userId: user.id,\n            organizationId\n          }\n        );\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION\n        });\n      }\n      const canUpdateRole = await hasPermission(\n        {\n          options,\n          organizationId,\n          role: member.role,\n          permissions: {\n            ac: [\"update\"]\n          }\n        },\n        ctx\n      );\n      if (!canUpdateRole) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The user is not permitted to update a role.`\n        );\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_A_ROLE\n        });\n      }\n      let condition;\n      if (\"roleName\" in ctx.body) {\n        condition = {\n          field: \"role\",\n          value: ctx.body.roleName,\n          operator: \"eq\",\n          connector: \"AND\"\n        };\n      } else {\n        condition = {\n          field: \"id\",\n          value: ctx.body.roleId,\n          operator: \"eq\",\n          connector: \"AND\"\n        };\n      }\n      let role = await ctx.context.adapter.findOne({\n        model: \"organizationRole\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          },\n          condition\n        ]\n      });\n      if (!role) {\n        ctx.context.logger.error(\n          `[Dynamic Access Control] The role name/id does not exist in the database.`,\n          {\n            ...\"roleName\" in ctx.body ? { roleName: ctx.body.roleName } : { roleId: ctx.body.roleId },\n            organizationId\n          }\n        );\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ROLE_NOT_FOUND\n        });\n      }\n      role.permission = role.permission ? JSON.parse(role.permission) : void 0;\n      const {\n        permission: _,\n        roleName: __,\n        ...additionalFields\n      } = ctx.body.data;\n      let updateData = {\n        ...additionalFields\n      };\n      if (ctx.body.data.permission) {\n        let newPermission = ctx.body.data.permission;\n        await checkForInvalidResources({ ac, ctx, permission: newPermission });\n        await checkIfMemberHasPermission({\n          ctx,\n          member,\n          options,\n          organizationId,\n          permissionRequired: newPermission,\n          user,\n          action: \"update\"\n        });\n        updateData.permission = newPermission;\n      }\n      if (ctx.body.data.roleName) {\n        let newRoleName = ctx.body.data.roleName;\n        newRoleName = normalizeRoleName(newRoleName);\n        await checkIfRoleNameIsTakenByPreDefinedRole({\n          role: newRoleName,\n          organizationId,\n          options,\n          ctx\n        });\n        await checkIfRoleNameIsTakenByRoleInDB({\n          role: newRoleName,\n          organizationId,\n          ctx\n        });\n        updateData.role = newRoleName;\n      }\n      const update = {\n        ...updateData,\n        ...updateData.permission ? { permission: JSON.stringify(updateData.permission) } : {}\n      };\n      await ctx.context.adapter.update({\n        model: \"organizationRole\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId,\n            operator: \"eq\",\n            connector: \"AND\"\n          },\n          condition\n        ],\n        update\n      });\n      return ctx.json({\n        success: true,\n        roleData: {\n          ...role,\n          ...update,\n          permission: updateData.permission || role.permission || null\n        }\n      });\n    }\n  );\n};\nasync function checkForInvalidResources({\n  ac,\n  ctx,\n  permission\n}) {\n  const validResources = Object.keys(ac.statements);\n  const providedResources = Object.keys(permission);\n  const hasInvalidResource = providedResources.some(\n    (r) => !validResources.includes(r)\n  );\n  if (hasInvalidResource) {\n    ctx.context.logger.error(\n      `[Dynamic Access Control] The provided permission includes an invalid resource.`,\n      {\n        providedResources,\n        validResources\n      }\n    );\n    throw new APIError(\"BAD_REQUEST\", {\n      message: ORGANIZATION_ERROR_CODES.INVALID_RESOURCE\n    });\n  }\n}\nasync function checkIfMemberHasPermission({\n  ctx,\n  permissionRequired: permission,\n  options,\n  organizationId,\n  member,\n  user,\n  action\n}) {\n  const hasNecessaryPermissions = [];\n  const permissionEntries = Object.entries(permission);\n  for await (const [resource, permissions] of permissionEntries) {\n    for await (const perm of permissions) {\n      hasNecessaryPermissions.push({\n        resource: { [resource]: [perm] },\n        hasPermission: await hasPermission(\n          {\n            options,\n            organizationId,\n            permissions: { [resource]: [perm] },\n            useMemoryCache: true,\n            role: member.role\n          },\n          ctx\n        )\n      });\n    }\n  }\n  const missingPermissions = hasNecessaryPermissions.filter((x) => x.hasPermission === false).map((x) => {\n    const key = Object.keys(x.resource)[0];\n    return `${key}:${x.resource[key][0]}`;\n  });\n  if (missingPermissions.length > 0) {\n    ctx.context.logger.error(\n      `[Dynamic Access Control] The user is missing permissions nessesary to ${action} a role with those set of permissions.\n`,\n      {\n        userId: user.id,\n        organizationId,\n        role: member.role,\n        missingPermissions\n      }\n    );\n    let errorMessage;\n    if (action === \"create\")\n      errorMessage = ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_A_ROLE;\n    else if (action === \"update\")\n      errorMessage = ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_A_ROLE;\n    else if (action === \"delete\")\n      errorMessage = ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_A_ROLE;\n    else if (action === \"read\")\n      errorMessage = ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_READ_A_ROLE;\n    else if (action === \"list\")\n      errorMessage = ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_LIST_A_ROLE;\n    else\n      errorMessage = ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_GET_A_ROLE;\n    throw new APIError(\"FORBIDDEN\", {\n      message: errorMessage,\n      missingPermissions\n    });\n  }\n}\nasync function checkIfRoleNameIsTakenByPreDefinedRole({\n  options,\n  organizationId,\n  role,\n  ctx\n}) {\n  const defaultRoles = options.roles ? Object.keys(options.roles) : [\"owner\", \"admin\", \"member\"];\n  if (defaultRoles.includes(role)) {\n    ctx.context.logger.error(\n      `[Dynamic Access Control] The role name \"${role}\" is already taken by a pre-defined role.`,\n      {\n        role,\n        organizationId,\n        defaultRoles\n      }\n    );\n    throw new APIError(\"BAD_REQUEST\", {\n      message: ORGANIZATION_ERROR_CODES.ROLE_NAME_IS_ALREADY_TAKEN\n    });\n  }\n}\nasync function checkIfRoleNameIsTakenByRoleInDB({\n  organizationId,\n  role,\n  ctx\n}) {\n  const existingRoleInDB = await ctx.context.adapter.findOne({\n    model: \"organizationRole\",\n    where: [\n      {\n        field: \"organizationId\",\n        value: organizationId,\n        operator: \"eq\",\n        connector: \"AND\"\n      },\n      {\n        field: \"role\",\n        value: role,\n        operator: \"eq\",\n        connector: \"AND\"\n      }\n    ]\n  });\n  if (existingRoleInDB) {\n    ctx.context.logger.error(\n      `[Dynamic Access Control] The role name \"${role}\" is already taken by a role in the database.`,\n      {\n        role,\n        organizationId\n      }\n    );\n    throw new APIError(\"BAD_REQUEST\", {\n      message: ORGANIZATION_ERROR_CODES.ROLE_NAME_IS_ALREADY_TAKEN\n    });\n  }\n}\n\nfunction parseRoles(roles) {\n  return Array.isArray(roles) ? roles.join(\",\") : roles;\n}\nconst organization = (options) => {\n  let endpoints = {\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/create`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.createOrganization`\n     *\n     * **client:**\n     * `authClient.organization.create`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-create)\n     */\n    createOrganization: createOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/update`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.updateOrganization`\n     *\n     * **client:**\n     * `authClient.organization.update`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-update)\n     */\n    updateOrganization: updateOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/delete`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.deleteOrganization`\n     *\n     * **client:**\n     * `authClient.organization.delete`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-delete)\n     */\n    deleteOrganization: deleteOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/set-active`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.setActiveOrganization`\n     *\n     * **client:**\n     * `authClient.organization.setActive`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-set-active)\n     */\n    setActiveOrganization: setActiveOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/get-full-organization`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.getFullOrganization`\n     *\n     * **client:**\n     * `authClient.organization.getFullOrganization`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-get-full-organization)\n     */\n    getFullOrganization: getFullOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/list`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listOrganizations`\n     *\n     * **client:**\n     * `authClient.organization.list`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list)\n     */\n    listOrganizations: listOrganizations(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/invite-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.createInvitation`\n     *\n     * **client:**\n     * `authClient.organization.inviteMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-invite-member)\n     */\n    createInvitation: createInvitation(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/cancel-invitation`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.cancelInvitation`\n     *\n     * **client:**\n     * `authClient.organization.cancelInvitation`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-cancel-invitation)\n     */\n    cancelInvitation: cancelInvitation(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/accept-invitation`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.acceptInvitation`\n     *\n     * **client:**\n     * `authClient.organization.acceptInvitation`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-accept-invitation)\n     */\n    acceptInvitation: acceptInvitation(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/get-invitation`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.getInvitation`\n     *\n     * **client:**\n     * `authClient.organization.getInvitation`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-get-invitation)\n     */\n    getInvitation: getInvitation(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/reject-invitation`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.rejectInvitation`\n     *\n     * **client:**\n     * `authClient.organization.rejectInvitation`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-reject-invitation)\n     */\n    rejectInvitation: rejectInvitation(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/list-invitations`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listInvitations`\n     *\n     * **client:**\n     * `authClient.organization.listInvitations`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list-invitations)\n     */\n    listInvitations: listInvitations(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/get-active-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.getActiveMember`\n     *\n     * **client:**\n     * `authClient.organization.getActiveMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-get-active-member)\n     */\n    getActiveMember: getActiveMember(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/check-slug`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.checkOrganizationSlug`\n     *\n     * **client:**\n     * `authClient.organization.checkSlug`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-check-slug)\n     */\n    checkOrganizationSlug: checkOrganizationSlug(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/add-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.addMember`\n     *\n     * **client:**\n     * `authClient.organization.addMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-add-member)\n     */\n    addMember: addMember(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/remove-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.removeMember`\n     *\n     * **client:**\n     * `authClient.organization.removeMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-remove-member)\n     */\n    removeMember: removeMember(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/update-member-role`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.updateMemberRole`\n     *\n     * **client:**\n     * `authClient.organization.updateMemberRole`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-update-member-role)\n     */\n    updateMemberRole: updateMemberRole(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/leave`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.leaveOrganization`\n     *\n     * **client:**\n     * `authClient.organization.leave`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-leave)\n     */\n    leaveOrganization: leaveOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/list-members`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listMembers`\n     *\n     * **client:**\n     * `authClient.organization.listMembers`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list-members)\n     */\n    listUserInvitations: listUserInvitations(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/list-members`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listMembers`\n     *\n     * **client:**\n     * `authClient.organization.listMembers`\n     */\n    listMembers: listMembers(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/get-active-member-role`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.getActiveMemberRole`\n     *\n     * **client:**\n     * `authClient.organization.getActiveMemberRole`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-get-active-member-role)\n     */\n    getActiveMemberRole: getActiveMemberRole(options)\n  };\n  const teamSupport = options?.teams?.enabled;\n  const teamEndpoints = {\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/create-team`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.createTeam`\n     *\n     * **client:**\n     * `authClient.organization.createTeam`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-create-team)\n     */\n    createTeam: createTeam(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/list-teams`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listOrganizationTeams`\n     *\n     * **client:**\n     * `authClient.organization.listTeams`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list-teams)\n     */\n    listOrganizationTeams: listOrganizationTeams(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/remove-team`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.removeTeam`\n     *\n     * **client:**\n     * `authClient.organization.removeTeam`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-remove-team)\n     */\n    removeTeam: removeTeam(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/update-team`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.updateTeam`\n     *\n     * **client:**\n     * `authClient.organization.updateTeam`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-update-team)\n     */\n    updateTeam: updateTeam(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/set-active-team`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.setActiveTeam`\n     *\n     * **client:**\n     * `authClient.organization.setActiveTeam`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-set-active-team)\n     */\n    setActiveTeam: setActiveTeam(),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/list-user-teams`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listUserTeams`\n     *\n     * **client:**\n     * `authClient.organization.listUserTeams`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-set-active-team)\n     */\n    listUserTeams: listUserTeams(),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/list-team-members`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listTeamMembers`\n     *\n     * **client:**\n     * `authClient.organization.listTeamMembers`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-set-active-team)\n     */\n    listTeamMembers: listTeamMembers(),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/add-team-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.addTeamMember`\n     *\n     * **client:**\n     * `authClient.organization.addTeamMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-add-team-member)\n     */\n    addTeamMember: addTeamMember(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/remove-team-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.removeTeamMember`\n     *\n     * **client:**\n     * `authClient.organization.removeTeamMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-remove-team-member)\n     */\n    removeTeamMember: removeTeamMember(options)\n  };\n  if (teamSupport) {\n    endpoints = {\n      ...endpoints,\n      ...teamEndpoints\n    };\n  }\n  const dynamicAccessControlEndpoints = {\n    createOrgRole: createOrgRole(options),\n    deleteOrgRole: deleteOrgRole(options),\n    listOrgRoles: listOrgRoles(options),\n    getOrgRole: getOrgRole(options),\n    updateOrgRole: updateOrgRole(options)\n  };\n  if (options?.dynamicAccessControl?.enabled) {\n    endpoints = {\n      ...endpoints,\n      ...dynamicAccessControlEndpoints\n    };\n  }\n  const roles = {\n    ...defaultRoles,\n    ...options?.roles\n  };\n  const teamSchema = teamSupport ? {\n    team: {\n      modelName: options?.schema?.team?.modelName,\n      fields: {\n        name: {\n          type: \"string\",\n          required: true,\n          fieldName: options?.schema?.team?.fields?.name\n        },\n        organizationId: {\n          type: \"string\",\n          required: true,\n          references: {\n            model: \"organization\",\n            field: \"id\"\n          },\n          fieldName: options?.schema?.team?.fields?.organizationId\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options?.schema?.team?.fields?.createdAt\n        },\n        updatedAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options?.schema?.team?.fields?.updatedAt,\n          onUpdate: () => /* @__PURE__ */ new Date()\n        },\n        ...options?.schema?.team?.additionalFields || {}\n      }\n    },\n    teamMember: {\n      modelName: options?.schema?.teamMember?.modelName,\n      fields: {\n        teamId: {\n          type: \"string\",\n          required: true,\n          references: {\n            model: \"team\",\n            field: \"id\"\n          },\n          fieldName: options?.schema?.teamMember?.fields?.teamId\n        },\n        userId: {\n          type: \"string\",\n          required: true,\n          references: {\n            model: \"user\",\n            field: \"id\"\n          },\n          fieldName: options?.schema?.teamMember?.fields?.userId\n        },\n        createdAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options?.schema?.teamMember?.fields?.createdAt\n        }\n      }\n    }\n  } : {};\n  const organizationRoleSchema = options?.dynamicAccessControl?.enabled ? {\n    organizationRole: {\n      fields: {\n        organizationId: {\n          type: \"string\",\n          required: true,\n          references: {\n            model: \"organization\",\n            field: \"id\"\n          },\n          fieldName: options?.schema?.organizationRole?.fields?.organizationId\n        },\n        role: {\n          type: \"string\",\n          required: true,\n          fieldName: options?.schema?.organizationRole?.fields?.role\n        },\n        permission: {\n          type: \"string\",\n          required: true,\n          fieldName: options?.schema?.organizationRole?.fields?.permission\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options?.schema?.organizationRole?.fields?.createdAt\n        },\n        updatedAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options?.schema?.organizationRole?.fields?.updatedAt,\n          onUpdate: () => /* @__PURE__ */ new Date()\n        },\n        ...options?.schema?.organizationRole?.additionalFields || {}\n      },\n      modelName: options?.schema?.organizationRole?.modelName\n    }\n  } : {};\n  const schema = {\n    ...organizationRoleSchema,\n    ...teamSchema,\n    ...{\n      organization: {\n        modelName: options?.schema?.organization?.modelName,\n        fields: {\n          name: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            fieldName: options?.schema?.organization?.fields?.name\n          },\n          slug: {\n            type: \"string\",\n            required: true,\n            unique: true,\n            sortable: true,\n            fieldName: options?.schema?.organization?.fields?.slug\n          },\n          logo: {\n            type: \"string\",\n            required: false,\n            fieldName: options?.schema?.organization?.fields?.logo\n          },\n          createdAt: {\n            type: \"date\",\n            required: true,\n            fieldName: options?.schema?.organization?.fields?.createdAt\n          },\n          metadata: {\n            type: \"string\",\n            required: false,\n            fieldName: options?.schema?.organization?.fields?.metadata\n          },\n          ...options?.schema?.organization?.additionalFields || {}\n        }\n      },\n      member: {\n        modelName: options?.schema?.member?.modelName,\n        fields: {\n          organizationId: {\n            type: \"string\",\n            required: true,\n            references: {\n              model: \"organization\",\n              field: \"id\"\n            },\n            fieldName: options?.schema?.member?.fields?.organizationId\n          },\n          userId: {\n            type: \"string\",\n            required: true,\n            fieldName: options?.schema?.member?.fields?.userId,\n            references: {\n              model: \"user\",\n              field: \"id\"\n            }\n          },\n          role: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            defaultValue: \"member\",\n            fieldName: options?.schema?.member?.fields?.role\n          },\n          createdAt: {\n            type: \"date\",\n            required: true,\n            fieldName: options?.schema?.member?.fields?.createdAt\n          },\n          ...options?.schema?.member?.additionalFields || {}\n        }\n      },\n      invitation: {\n        modelName: options?.schema?.invitation?.modelName,\n        fields: {\n          organizationId: {\n            type: \"string\",\n            required: true,\n            references: {\n              model: \"organization\",\n              field: \"id\"\n            },\n            fieldName: options?.schema?.invitation?.fields?.organizationId\n          },\n          email: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            fieldName: options?.schema?.invitation?.fields?.email\n          },\n          role: {\n            type: \"string\",\n            required: false,\n            sortable: true,\n            fieldName: options?.schema?.invitation?.fields?.role\n          },\n          ...teamSupport ? {\n            teamId: {\n              type: \"string\",\n              required: false,\n              sortable: true,\n              fieldName: options?.schema?.invitation?.fields?.teamId\n            }\n          } : {},\n          status: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            defaultValue: \"pending\",\n            fieldName: options?.schema?.invitation?.fields?.status\n          },\n          expiresAt: {\n            type: \"date\",\n            required: true,\n            fieldName: options?.schema?.invitation?.fields?.expiresAt\n          },\n          inviterId: {\n            type: \"string\",\n            references: {\n              model: \"user\",\n              field: \"id\"\n            },\n            fieldName: options?.schema?.invitation?.fields?.inviterId,\n            required: true\n          },\n          ...options?.schema?.invitation?.additionalFields || {}\n        }\n      }\n    }\n  };\n  const api = shimContext(endpoints, {\n    orgOptions: options || {},\n    roles,\n    getSession: async (context) => {\n      return await getSessionFromCtx(context);\n    }\n  });\n  return {\n    id: \"organization\",\n    endpoints: {\n      ...api,\n      hasPermission: createAuthEndpoint(\n        \"/organization/has-permission\",\n        {\n          method: \"POST\",\n          requireHeaders: true,\n          body: z.object({\n            organizationId: z.string().optional()\n          }).and(\n            z.union([\n              z.object({\n                permission: z.record(z.string(), z.array(z.string())),\n                permissions: z.undefined()\n              }),\n              z.object({\n                permission: z.undefined(),\n                permissions: z.record(z.string(), z.array(z.string()))\n              })\n            ])\n          ),\n          use: [orgSessionMiddleware],\n          metadata: {\n            $Infer: {\n              body: {}\n            },\n            openapi: {\n              description: \"Check if the user has permission\",\n              requestBody: {\n                content: {\n                  \"application/json\": {\n                    schema: {\n                      type: \"object\",\n                      properties: {\n                        permission: {\n                          type: \"object\",\n                          description: \"The permission to check\",\n                          deprecated: true\n                        },\n                        permissions: {\n                          type: \"object\",\n                          description: \"The permission to check\"\n                        }\n                      },\n                      required: [\"permissions\"]\n                    }\n                  }\n                }\n              },\n              responses: {\n                \"200\": {\n                  description: \"Success\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          error: {\n                            type: \"string\"\n                          },\n                          success: {\n                            type: \"boolean\"\n                          }\n                        },\n                        required: [\"success\"]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const activeOrganizationId = ctx.body.organizationId || ctx.context.session.session.activeOrganizationId;\n          if (!activeOrganizationId) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n            });\n          }\n          const adapter = getOrgAdapter(ctx.context, options);\n          const member = await adapter.findMemberByOrgId({\n            userId: ctx.context.session.user.id,\n            organizationId: activeOrganizationId\n          });\n          if (!member) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n            });\n          }\n          const result = await hasPermission(\n            {\n              role: member.role,\n              options: options || {},\n              permissions: ctx.body.permissions ?? ctx.body.permission,\n              organizationId: activeOrganizationId\n            },\n            ctx\n          );\n          return ctx.json({\n            error: null,\n            success: result\n          });\n        }\n      )\n    },\n    schema: {\n      ...schema,\n      session: {\n        fields: {\n          activeOrganizationId: {\n            type: \"string\",\n            required: false,\n            fieldName: options?.schema?.session?.fields?.activeOrganizationId\n          },\n          ...teamSupport ? {\n            activeTeamId: {\n              type: \"string\",\n              required: false,\n              fieldName: options?.schema?.session?.fields?.activeTeamId\n            }\n          } : {}\n        }\n      }\n    },\n    $Infer: {\n      Organization: {},\n      Invitation: {},\n      Member: {},\n      Team: teamSupport ? {} : {},\n      TeamMember: teamSupport ? {} : {},\n      ActiveOrganization: {}\n    },\n    $ERROR_CODES: ORGANIZATION_ERROR_CODES,\n    options\n  };\n};\n\nexport { organization as o, parseRoles as p };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}